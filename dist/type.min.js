;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var process=module.exports={};process.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,o="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};if(o){var n=[];return window.addEventListener("message",function(e){if(e.source===window&&"process-tick"===e.data&&(e.stopPropagation(),n.length>0)){var o=n.shift();o()}},!0),function(e){n.push(e),window.postMessage("process-tick","*")}}return function(e){setTimeout(e,0)}}(),process.title="browser",process.browser=!0,process.env={},process.argv=[],process.binding=function(){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(){throw new Error("process.chdir is not supported")};
},{}],2:[function(require,module,exports){
module.exports={PUBLIC:"public",PRIVATE:"private",PROTECTED:"protected"};
},{}],3:[function(require,module,exports){
function init(e,r,t,n){inits.on(inits.SCOPE);var s=e();return inits.off(inits.SCOPE),s.self._pub=r,build(e,s),expose(e,s,r),r.$type=e,r.$scope=function(){return tunnel.value()===e?s.self:void 0},n&&s.self.ctor.apply(s.self,t),s.self}function build(e,r){if(util.each(e.mixins,function(t){init(t,r.self._pub,[],!1),tunnel.open(t);var n=r.self._pub.$scope();tunnel.close(),createProxy(t,n,e,r.self),r.mixins.push(n)}),null!==e.parent){if(e.parent.members.ctor&&e.parent.members.ctor.params.length>0&&(!e.members.ctor||!e.members.ctor.callsuper))throw new errors.InitializationError("Base constructor contains parameters and must be called explicitly.");inits.on(inits.SCOPE),r.parent=e.parent(),inits.off(inits.SCOPE),r.parent.self._pub=r.self._pub,build(e.parent,r.parent)}null!==e.parent&&createProxy(e.parent,r.parent.self,e,r.self),util.each(e.members,function(t,n){t.method?buildMethod(e,r,n,t):t.isEvent?buildEvent(e,r,n):buildProperty(e,r,n,t)}),r.self.ctor||buildMethod(e,r,special.CTOR,{callsuper:!1,params:[],access:access.PRIVATE,isVirtual:!1,name:special.CTOR,method:function(){}})}function createProxy(e,r,t,n){util.each(e.members,function(e,s){e.access===access.PRIVATE||t.members[s]||(e.method||e.isEvent?n[s]=r[s]:addProperty(n,s,{get:e.get&&e.get.access!==access.PRIVATE?function(){return r[s]}:readOnlyGet(s),set:e.set&&e.set.access!==access.PRIVATE?function(e){r[s]=e}:writeOnlySet(s)}))})}function buildMethod(e,r,t,n){if("ctor"===t)r.self.ctor=function(){delete r.self.ctor;var t=[],s={_init:r.self._init,_super:r.self._super};if(util.each(e.mixins,function(e,n){e.members.ctor&&(e.members.ctor.params.length>0?t.push(e):e.members.ctor.method.call(r.mixins[n]))}),t.length>0&&(r.self._init=function(n){var s=util.indexOf(t,n);if(-1===s)throw new errors.InitializationError("Mixin is not defined for this type or has already been initialized.");var i=util.makeArray(arguments);i.shift(),n.members.ctor.method.apply(r.mixins[util.indexOf(e.mixins,n)],i),t.splice(s,1)}),null!==e.parent&&e.parent.members.ctor&&(e.parent.members.ctor.params.length>0?r.self._super=r.parent.self.ctor:r.parent.self.ctor()),n.method.apply(r.self,arguments),r.self._super=s._super,r.self._init=s._init,t.length>0)throw new errors.InitializationError("Some mixins were not initialized. Please make sure the constructor calls this._init() for each mixin having parameters in its constructor.")};else if(null!==r.parent&&r.parent.self[t]&&n.callsuper){var s=r.parent.self[t];r.self[t]=function(){var e=r.self._super;r.self._super=s;var t=n.method.apply(r.self,arguments);return r.self._super=e,t}}else r.self[t]=function(){return n.method.apply(r.self,arguments)}}function buildProperty(e,r,t,n){function s(e,t){return function(){var n={_super:r.self._super,_value:r.self._value};r.self._super=t,r.self._value=function(e){return arguments.length&&(i=e),i};var s=e.apply(r.self,arguments);return r.self._super=n._super,r.self._value=n._value,s}}var i=n.value,l={};l.get=n.get?s(n.get.method,n.get.callsuper&&null!==r.parent?function(){return r.parent.self[t]}:null):readOnlyGet(t),l.set=n.set?s(n.set.method,n.set.callsuper&&null!==r.parent?function(e){r.parent.self[t]=e}:null):writeOnlySet(t),addProperty(r.self,t,l)}function buildEvent(e,r,t){var n=[];r.self[t]={addHandler:function(e){n.push(e)},removeHandler:function(e){var r=util.indexOf(n,e);r>-1&&n.splice(r,1)},raise:function(){for(var e=0,t=n.length;t>e;e++)n[e].apply(r.self._pub,arguments)}}}function expose(e,r,t){null!==e.parent&&expose(e.parent,r.parent,t),util.each(e.members,function(e,n){e.access===access.PUBLIC&&(e.method?t[n]=r.self[n]:e.isEvent?t[n]={addHandler:r.self[n].addHandler,removeHandler:r.self[n].removeHandler}:addProperty(t,n,{get:e.get&&e.get.access===access.PUBLIC?function(){return r.self[n]}:readOnlyGet(n),set:e.set&&e.set.access===access.PUBLIC?function(e){r.self[n]=e}:writeOnlySet(n)}))})}function addProperty(e,r,t){if(environment.IE8||(t.enumerable=!0),t.configurable=!0,environment.IE8&&util.hasOwn(e,r)&&delete e[r],!Object.defineProperty)throw new errors.InitializationError("JavaScript properties are not supported by this browser.");Object.defineProperty(e,r,t)}function readOnlyGet(e){return function(){throw new errors.AccessViolationError("Cannot read from write only property '"+e+"'.")}}function writeOnlySet(e){return function(){throw new errors.AccessViolationError("Cannot assign to read only property '"+e+"'.")}}var access=require("./access"),environment=require("./environment"),errors=require("./errors"),inits=require("./inits"),special=require("./special"),tunnel=require("./tunnel"),util=require("./util");module.exports=init;
},{"./access":2,"./environment":6,"./errors":7,"./inits":8,"./special":10,"./tunnel":11,"./util":13}],4:[function(require,module,exports){
function resolve(e,t){if(t===e._pub)return e.set(REJECTED,new TypeError("2.3.1 A promise returned from onFulfilled cannot refer to itself.")),!0;if(t){var r,n=!1;try{util.hasOwn(t,"then")&&(r=t.then)}catch(i){return e.set(REJECTED,i),!0}if(util.isFunc(r)){try{r.call(t,function(t){n||(n=!0,resolve(e,t)||e.set(FULFILLED,t))},function(t){n||(n=!0,e.set(REJECTED,t))})}catch(i){n||e.set(REJECTED,i)}return!0}}}var process=require("__browserify_process"),errors=require("./errors"),type=require("./define"),util=require("./util"),Deferred=require("./deferred"),PENDING="pending",FULFILLED="fulfilled",REJECTED="rejected",Promise=type().def({ctor:function(){this.queue=[],this.state=PENDING,this.result=null},value:function(){if(this.state===REJECTED)throw this.result;if(this.state===PENDING)throw new errors.InvalidOperationError("Promise is still in pending state.");return this.result},then:function(e,t,r){var n=this._pry(new Promise);return r=r===!1?!1:!0,this.enqueue(this.handle(n,e,t),r),n._pub},done:function(e,t){return this.then(e,null,t),this._pub},fail:function(e,t){return this.then(null,e,t),this._pub},always:function(e,t){return this.then(e,e,t),this._pub},_set:function(e,t){if(this.state===PENDING){this.state=e,this.result=t;for(var r=0,n=this.queue.length;n>r;r++)this.queue[r](e,t);this.queue=[]}},__enqueue:function(e,t){if(t){var r=e;e=function(){var e=arguments,t=function(){r.apply(void 0,e)};process.nextTick(t)}}this.state===PENDING?this.queue.push(e):e(this.state,this.result)},__handle:function(e,t,r){return function(n,i){var u,s=n===FULFILLED?t:r;if(!util.isFunc(s))return e.set(n,i),void 0;try{u=s.call(void 0,i)}catch(o){return e.set(REJECTED,o),void 0}resolve(e,u)||e.set(FULFILLED,u)}}}),Deferred=module.exports=type().extend(Promise).def({ctor:function(){var e=this;this.promise={then:function(){return e.then.apply(e,arguments)},done:function(){return e.done.apply(e,arguments),e.promise},fail:function(){return e.fail.apply(e,arguments),e.promise},always:function(){return e.always.apply(e,arguments),e.promise},value:function(){return e.value()}}},promise:{get:null,__set:null},resolve:function(e){return this.set(FULFILLED,e),this._pub},reject:function(e){return this.set(REJECTED,e),this._pub}});Deferred.when=function(e){var t=new Deferred,r=util.isArray(e)?e:util.makeArray(arguments),n=0,i=[];return util.each(r,function(e,u){e.then(function(e){i[u]=e,++n===r.length&&t.resolve(i)},function(e){t.reject(e)},!1)}),r.length||t.resolve([]),t.promise};
},{"./deferred":4,"./define":5,"./errors":7,"./util":13,"__browserify_process":1}],5:[function(require,module,exports){
function create(){var e=null,r=!0,t=!1,n=function(){if(inits.has(inits.TYPE_CHECK))return typeCheckResult=!0,void 0;if(inits.has(inits.SCOPE)){null===e&&(e=defineScope(n));var t={parent:null,self:null,mixins:[]};return environment.IE8?(t.self=getPlainDOMObject(),applyPrototypeMembers(e,t.self)):t.self=new e,t}if(inits.has(inits.PUB)&&r){var i;return r=!1,environment.IE8?(i=getPlainDOMObject(),applyPrototypeMembers(n,i)):i=new n,build(n,i,arguments,!0),r=!0,i}};return n.members={},n.parent=null,n.mixins=[],n.extend=function(e){if(util.keys(n.members).length>0)throw new errors.DefinitionError("Cannot change the base type after members have been defined.");if(!util.isFunc(e))throw new TypeError("Base type must be a function.");if(isTypeOurs(e)){for(var r=e;r;){if(r===n)throw new errors.DefinitionError("Cannot inherit from "+(e===n?"self":"derived type")+".");r=r.parent}n.parent=e}return inits.off(inits.PUB),n.prototype=new e,inits.on(inits.PUB),n},n.def=function(e){return util.each(e,function(e,r){var i=parseMember(r);if(r=i.name,validateMember(n,i),r===special.CTOR&&(util.isArray(e)&&(n.$inject=e,e=e.pop()),!util.isFunc(e)))throw new TypeError("Constructor must be a function.");if(n.members[r]={access:i.access,isVirtual:i.isVirtual},util.isFunc(e)?defineMethod(n,r,e):defineProperty(n,i,e),r===special.CTOR){if(!n.members.ctor.callsuper&&null!==n.parent&&n.parent.members.ctor&&n.parent.members.ctor.params.length>0)throw new errors.DefinitionError("Constructor must call the base constructor explicitly because it contains parameters.");t=!0}}),n},n.events=function(e){return util.each(e,function(e){var r=parseMember(e);if(e=r.name,validateMember(n,r),e===special.CTOR)throw new errors.DefinitionError("Event cannot be named 'ctor'.");if(r.isVirtual)throw new errors.DefinitionError("Events cannot be virtual.");n.members[e]={access:r.access,isEvent:!0}}),n},n.include=function(e){if(t)throw new errors.DefinitionError("Mixins must be defined before the constructor.");return util.each(e,function(e){if(!isTypeOurs(e))throw new TypeError("Mixin must be a type.");if(e===n)throw new errors.DefinitionError("Cannot include self.");checkMixinForCircularReference(n,e),n.mixins.push(e)}),n},n}function checkMixinForCircularReference(e,r){if(e===r)throw new errors.DefinitionError("Cannot include type that includes self.");util.each(r.mixins,function(r){checkMixinForCircularReference(e,r)})}function isTypeOurs(e){return inits.on(inits.TYPE_CHECK),typeCheckResult=!1,e(),inits.off(inits.TYPE_CHECK),typeCheckResult}function defineScope(e){var r=function(){};inits.off(inits.PUB|inits.SCOPE),r.prototype=new e,inits.on(inits.PUB|inits.SCOPE);var t=r.prototype;return t._pry=function(r){tunnel.open(e);var t=r&&r.$scope&&util.isFunc(r.$scope)?r.$scope():null;return tunnel.close(),t||r},r}function parseMember(e){var r=e.substr(0,2),t=GET_ACCESS[r]||GET_ACCESS[e[0]]||access.PUBLIC,n=IS_VIRTUAL[r]||IS_VIRTUAL[e[0]]||!1;return e=e.substr(GET_PREFIX[r]||GET_PREFIX[e[0]]||0),e===special.CTOR&&(t=access.PRIVATE,n=!1),{access:t,isVirtual:n,name:e}}function validateMember(e,r){if(isMemberDefined(e,r.name))throw new errors.DefinitionError("Member '"+r.name+"' is already defined.");if(r.access!==access.PRIVATE&&null!==e.parent&&e.parent.members[r.name]&&e.parent.members[r.name].access!==r.access)throw new errors.DefinitionError("Cannot change access modifier of member '"+name+"' from "+e.parent.members[r.name].access+" to "+r.access+".")}function isMemberDefined(e,r,t){return!e.members[r]||t&&e.members[r].access===access.PRIVATE||t&&e.members[r].isVirtual?null!==e.parent?isMemberDefined(e.parent,r,!0):!1:!0}function defineMethod(e,r,t){var n=[],i=t.toString().match(/^function\s*\(([^())]+)\)/);null!==i&&util.each(i[1].split(","),function(e){n.push(util.trim(e))}),e.members[r].method=t,e.members[r].params=n,e.members[r].callsuper=fnTest.test(t)}function defineProperty(e,r,t){"object"!==util.typeOf(t)&&(t={value:t});var n=0,i={};if(util.each(t,function(t,s){s=s.toLowerCase();var o=s.substr(0,2);if(IS_VIRTUAL[o]||IS_VIRTUAL[s[0]])throw new errors.DefinitionError("Property '"+r.name+"' cannot have virtual accessors.");var a=GET_ACCESS[o]||GET_ACCESS[s[0]]||r.access;if(ACCESS[a]<ACCESS[r.access])throw new errors.DefinitionError("The "+s+" accessor of the property '"+r.name+"' cannot have a lower access modifier than the property itself.");if(s=s.substr(GET_PREFIX[o]||GET_PREFIX[s[0]]||0),"get"===s||"set"===s){if(a!==r.access&&n++,null!==e.parent&&e.parent.members[r.name]&&e.parent.members[r.name][s]&&e.parent.members[r.name][s].access!==a)throw new errors.DefinitionError("Cannot change access modifier of '"+s+"' accessor for property '"+r.name+"' from "+e.parent.members[r.name][s].access+" to "+a+".");if(null!==t&&!util.isFunc(t))throw new TypeError(s.substr(0,1).toUpperCase()+s.substr(1)+" accessor for property '"+r.name+"' must be a function or null (uses default implementation.)");i[s]={access:a,method:t}}}),t.get=i.get,t.set=i.set,2===n)throw new errors.DefinitionError("Cannot set access modifers for both accessors of the property '"+r.name+"'.");t.get||t.set||(t.get={access:r.access},t.set={access:r.access}),t.get&&!util.isFunc(t.get.method)&&(t.get.method=function(){return this._value()}),t.set&&!util.isFunc(t.set.method)&&(t.set.method=function(e){this._value(e)}),util.each([t.get,t.set],function(t,n){if(t){var i=0===n?"get":"set";if(null!==e.parent&&e.parent.members[r.name]&&e.parent.members[r.name].access!==access.PRIVATE&&void 0===e.parent.members[r.name][i])throw new errors.DefinitionError("Cannot change read/write definition of property '"+r.name+"'.");e.members[r.name][i]={access:t.access,method:t.method,callsuper:fnTest.test(t.method)}}}),e.members[r.name].value=t.value?t.value:null}function applyPrototypeMembers(e,r){var t=e.prototype;t.constructor.prototype!==t&&applyPrototypeMembers(t.constructor,r);for(var n in t)util.hasOwn(t,n)&&(r[n]=t[n])}function getPlainDOMObject(){function e(e,r){var t;Object.defineProperty(e,r,{configurable:!0,get:function(){return t},set:function(e){t=e}})}var r,t=document.createElement();for(r in t)util.hasOwn(t,r)&&e(t,r);return t}var access=require("./access"),build=require("./build"),environment=require("./environment"),errors=require("./errors"),inits=require("./inits"),special=require("./special"),tunnel=require("./tunnel"),util=require("./util");module.exports=create;var GET_ACCESS={__:access.PRIVATE,_:access.PROTECTED},IS_VIRTUAL={$:!0,_$:!0},GET_PREFIX={__:2,_$:2,_:1,$:1},ACCESS={};ACCESS[access.PUBLIC]=1,ACCESS[access.PROTECTED]=2,ACCESS[access.PRIVATE]=3;var fnTest=/xyz/.test(function(){xyz=0})?/\b_super\b/:/.*/,typeCheckResult=!1;
},{"./access":2,"./build":3,"./environment":6,"./errors":7,"./inits":8,"./special":10,"./tunnel":11,"./util":13}],6:[function(require,module,exports){
var IE8=!1;try{Object.defineProperty({},"x",{})}catch(e){IE8=!0}module.exports={IE8:IE8,window:"object"==typeof window?window:{}};
},{}],7:[function(require,module,exports){
var DefinitionError=function(r){this.message=r};DefinitionError.prototype=new Error,DefinitionError.prototype.name="type.DefinitionError";var InitializationError=function(r){this.message=r};InitializationError.prototype=new Error,InitializationError.prototype.name="type.InitializationError";var AccessViolationError=function(r){this.message=r};AccessViolationError.prototype=new Error,AccessViolationError.prototype.name="type.AccessViolationError";var InvalidOperationError=function(r){this.message=r};InvalidOperationError.prototype=new Error,InvalidOperationError.prototype.name="type.InvalidOperationError";var ArgumentError=function(r){this.message=r};ArgumentError.prototype=new Error,ArgumentError.prototype.name="type.ArgumentError",module.exports={DefinitionError:DefinitionError,InitializationError:InitializationError,AccessViolationError:AccessViolationError,InvalidOperationError:InvalidOperationError,ArgumentError:ArgumentError};
},{}],8:[function(require,module,exports){
var PUB=1,SCOPE=2,TYPE_CHECK=4,inits=PUB;module.exports={PUB:PUB,SCOPE:SCOPE,TYPE_CHECK:TYPE_CHECK,on:function(n){inits|=n},off:function(n){inits&=~n},has:function(n){return(inits&n)===n}};
},{}],9:[function(require,module,exports){
var environment=require("./environment"),errors=require("./errors"),type=require("./define"),util=require("./util"),Deferred=require("./deferred"),PROVIDER="Provider`",LAZY_PROVIDER="LazyProvider`",Injector=module.exports=type().def({ctor:function(){this.container={}},bind:function(e){var r=this;if(!e||!util.isString(e))throw new errors.ArgumentError("Argument 'service' must have a value.");return{to:function(t){var n=r.register(e,t),i={asSingleton:function(){var e,r=n.resolve,t=!1;return n.resolve=function(){return t||(e=r.apply(void 0,arguments),t=!0),e},i},whenFor:function(e){if(!util.isArray(e)||!e.length)throw new errors.ArgumentError("Expected 'services' to be an array of string.");return n.filter=e.slice(0),i}};return i}}},unbind:function(e,r){r=r||[];var t=this.container[e]||[],n=r.length;if(n){for(var i,o,u=0,s=t.length;s>u;u++){if(t[u].filter)for(i=0;n>i;i++)for(o=util.indexOf(t[u].filter,r[i]);o>-1;)t[u].filter.splice(o,1),o=util.indexOf(t[u].filter,r[i]);t[u].filter.length||(t.splice(u,1),u--)}t.length||delete this.container[e]}else delete this.container[e];return this._pub},resolve:function(e,r){var t=this,n=new Deferred;return r=util.makeArray(arguments),r.shift(0),this.resolveTarget(e).then(function(e){var i=t.makeFactory(e);e.theory.isProvider?n.resolve(i):n.resolve(i.apply(void 0,r))},function(e){n.reject(e)},!1),n.promise},autoBind:function(e){return this.registerGraph("",e),this._pub},__register:function(e,r){var t=null;if(util.isArray(r)?(r=r.slice(0),t={resolve:r.pop(),inject:r}):t={resolve:r,inject:(r.$inject||[]).slice(0)},!util.isFunc(t.resolve)){var n=t.resolve;t.resolve=function(){return n}}return this.container[e]=this.container[e]||[],this.container[e].push(t),t},__registerGraph:function(e,r){var t=this,n=""===e?"":e+".";util.each(r,function(e,r){util.isPlainObject(e)?t.registerGraph(n+r,e):t.register(n+r,e)})},__makeFactory:function(e){function r(e){return{parent:null,position:null,cache:[],recipe:e}}if(e.theory.isLazy)return this.makeLazyFactory(e);for(var t,n=this,i=[],o=r(e),u=[o];u.length;)t=[],util.each(u,function(e){e.recipe.theory.isLazy||util.each(e.recipe.dependencies,function(n,i){var o=r(n);o.parent=e,o.position=i,t.push(o)})}),i.push(u),u=t;return i.reverse(),i.pop(),function(){util.each(i,function(e){util.each(e,function(e){e.parent.cache[e.position]=e.recipe.theory.isProvider?n.makeFactory(e.recipe):e.recipe.theory.resolve.apply(void 0,e.cache),e.cache=[]})});var e=o.cache.concat(util.makeArray(arguments));return o.cache=[],o.recipe.theory.resolve.apply(void 0,e)}},__makeLazyFactory:function(e){var r=this,t=null;return function(){var n=new Deferred,i=arguments;return t?n.resolve(t.apply(void 0,i)):r.resolveTarget(e.theory.name).then(function(e){t=r.makeFactory(e),n.resolve(t.apply(void 0,i))},function(e){n.reject(e)},!1),n.promise}},__resolveTarget:function(e){function r(){i=util.map(u.missing,function(e){return e!==PROVIDER&&new RegExp("^"+PROVIDER).test(e)?e=e.substr(PROVIDER.length):e!==LAZY_PROVIDER&&new RegExp("^"+LAZY_PROVIDER).test(e)&&(e=e.substr(LAZY_PROVIDER.length)),e.replace(/\./g,"/")}),environment.window.require(i,t,n)}function t(){var e={},t=arguments;util.each(u.missing,function(r,n){var u=t[n];return u&&/(string|function|array)/.test(util.typeOf(u))?util.isArray(u)&&!util.isFunc(u[u.length-1])?(u=u[u.length-1],o.reject(new TypeError("Module '"+i[n]+"' loaded successfully. Failed to resolve service '"+r+"'. Found array. Expected last element to be a function. Found '"+(u&&u.toString?u.toString():util.typeOf(u))+"' instead.")),!1):(e[r]=t[n],void 0):(o.reject(new TypeError("Module '"+i[n]+"' loaded successfully. Failed to resolve service '"+r+"'. Expected service to be a string, array, or function. Found '"+(u&&u.toString?u.toString():util.typeOf(u))+"' instead.")),!1)}),"rejected"!==o.state&&(u.update(e),u.missing.length?r():o.resolve(u.recipe))}function n(e){o.reject(e)}var i,o=new Deferred,u=this.getExecutionPlan(e);return u.missing.length?environment.window.require?r():o.reject(new errors.InvalidOperationError("Service(s) "+util.map(u.missing,function(e){return"'"+e+"'"}).join(", ")+" have not been registered.")):o.resolve(u.recipe),o.promise},__getExecutionPlan:function(e){function r(e,t){var s=e!==LAZY_PROVIDER&&new RegExp("^"+LAZY_PROVIDER).test(e),c=s||e!==PROVIDER&&new RegExp("^"+PROVIDER).test(e),l=function(a){var f=a[e];if(f){var v=i.theorize(f);v?(v.isProvider=c,v.isLazy=s,t(n(v))):(o.push(f),r(f,t)),u.splice(util.indexOf(u,l),1)}};u.push(l)}function t(e){return{theory:e,dependencies:[]}}function n(e){var n=t(e);if(n.theory.isLazy)return n;for(var u,s=[n];s.length;)u=[],util.each(s,function(e){e.theory.isLazy||util.each(e.theory.inject,function(n,s){var c=i.evaluate(n,e.theory.name);c?(c=t(c),e.dependencies[s]=c,u.push(c)):(o.push(n),r(n,function(r){e.dependencies[s]=r}))})}),s=u;return n}var i=this,o=[],u=[],s=this.evaluate(e),c=null;s?c=n(s):(o.push(e),r(e,function(e){l.recipe=e}));var l={recipe:c,missing:o,update:function(e){o.splice(0),util.each(u.slice(0),function(r){r(e)})}};return l},__theorize:function(e){if(!e)return null;var r=null;return util.isFunc(e)?r={resolve:e,inject:(e.$inject||[]).slice(0)}:util.isArray(e)&&(e=e.slice(0),r={resolve:e.pop(),inject:e}),r},__evaluate:function(e,r){function t(e){for(var t=n.container[e]||[],i=t.length-1;i>=0;i--)if(r){if(!t[i].filter||util.indexOf(t[i].filter,r)>-1)break}else if(!t[i].filter)break;return t[i]||null}var n=this,i=this.theorize(e);if(!i&&util.isString(e)){var o=t(e);o&&(i={resolve:o.resolve,inject:o.inject.slice(0),name:e}),!i&&e!==PROVIDER&&new RegExp("^"+PROVIDER).test(e)&&(o=t(e.substr(PROVIDER.length)),o&&(i={resolve:o.resolve,inject:o.inject.slice(0),name:e.substr(PROVIDER.length),isProvider:!0})),!i&&e!==LAZY_PROVIDER&&new RegExp("^"+LAZY_PROVIDER).test(e)&&(o=t(e.substr(LAZY_PROVIDER.length))||{},i={resolve:o.resolve||null,inject:o.inject||null,name:e.substr(LAZY_PROVIDER.length),isProvider:!0,isLazy:!0},i.inject&&(i.inject=i.inject.slice(0)))}return i}});module.exports.providerOf=function(e){return PROVIDER+e},module.exports.lazyProviderOf=function(e){return LAZY_PROVIDER+e};
},{"./deferred":4,"./define":5,"./environment":6,"./errors":7,"./util":13}],10:[function(require,module,exports){
module.exports={CTOR:"ctor"};
},{}],11:[function(require,module,exports){
var value=null;module.exports={open:function(u){value=u},close:function(){value=null},value:function(){return value}};
},{}],12:[function(require,module,exports){
var deferred=require("./deferred"),define=require("./define"),environment=require("./environment"),errors=require("./errors"),injector=require("./injector"),util=require("./util"),type=define;type.of=util.typeOf,type.DefinitionError=errors.DefinitionError,type.InitializationError=errors.InitializationError,type.AccessViolationError=errors.AccessViolationError,type.InvalidOperationError=errors.InvalidOperationError,type.ArgumentError=errors.ArgumentError,type.injector=injector,type.providerOf=injector.providerOf,type.lazyProviderOf=injector.lazyProviderOf,type.defer=deferred,module.exports=environment.window.type=type;
},{"./deferred":4,"./define":5,"./environment":6,"./errors":7,"./injector":9,"./util":13}],13:[function(require,module,exports){
function isArrayLike(r){var n=r.length,t=typeOf(r);return"window"===typeOf(r)?!1:1===r.nodeType&&n?!0:"array"===t||"function"!==t&&(0===n||"number"==typeof n&&n>0&&n-1 in r)}function makeArray(r){if(isArray(r))return r;var n=[];return each(r,function(r){n.push(r)}),n}function each(r,n){var t=0;if(isArrayLike(r))for(;t<r.length&&n.call(void 0,r[t],t)!==!1;t++);else for(t in r)if(hasOwn(r,t)&&n.call(void 0,r[t],t)===!1)break}function typeOf(r){return null===r?"null":void 0===r?"undefined":Object.prototype.toString.call(r).match(/^\[object\s(.*)\]$/)[1].toLowerCase()}function isFunc(r){return"function"===typeOf(r)}function isArray(r){return"array"===typeOf(r)}function isString(r){return"string"===typeOf(r)}function trim(r){return r.trim?r.trim():r.replace(/^\s+|\s+$/g,"")}function keys(r){if(Object.keys)return Object.keys(r);var n=[];for(var t in r)hasOwn(r,t)&&n.push(t);return n}function hasOwn(r,n){return Object.prototype.hasOwnProperty.call(r,n)}function indexOf(r,n){if(r.indexOf)return r.indexOf(n);var t=-1;return each(r,function(r,e){return r===n?(t=e,!1):void 0}),t}function isPlainObject(r){if("object"!==typeOf(r)||r.nodeType||"window"===typeOf(r))return!1;try{if(r.constructor&&!hasOwn(r.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}return!0}function map(r,n,t){if(r=makeArray(r),Array.prototype.map)return r.map(n,t);var e=[];each(r,function(r,i){e.push(n.call(t,r,i))})}module.exports={makeArray:makeArray,each:each,typeOf:typeOf,isFunc:isFunc,isString:isString,isArray:isArray,trim:trim,keys:keys,hasOwn:hasOwn,indexOf:indexOf,isPlainObject:isPlainObject,map:map};
},{}]},{},[12])
//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJkOi9EZXYgU3RvcmFnZS9HaXQvdHlwZWpzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9pbnNlcnQtbW9kdWxlLWdsb2JhbHMvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsImQ6L0RldiBTdG9yYWdlL0dpdC90eXBlanMvc3JjL2FjY2Vzcy5qcyIsImQ6L0RldiBTdG9yYWdlL0dpdC90eXBlanMvc3JjL2J1aWxkLmpzIiwiZDovRGV2IFN0b3JhZ2UvR2l0L3R5cGVqcy9zcmMvZGVmZXJyZWQuanMiLCJkOi9EZXYgU3RvcmFnZS9HaXQvdHlwZWpzL3NyYy9kZWZpbmUuanMiLCJkOi9EZXYgU3RvcmFnZS9HaXQvdHlwZWpzL3NyYy9lbnZpcm9ubWVudC5qcyIsImQ6L0RldiBTdG9yYWdlL0dpdC90eXBlanMvc3JjL2Vycm9ycy5qcyIsImQ6L0RldiBTdG9yYWdlL0dpdC90eXBlanMvc3JjL2luaXRzLmpzIiwiZDovRGV2IFN0b3JhZ2UvR2l0L3R5cGVqcy9zcmMvaW5qZWN0b3IuanMiLCJkOi9EZXYgU3RvcmFnZS9HaXQvdHlwZWpzL3NyYy9zcGVjaWFsLmpzIiwiZDovRGV2IFN0b3JhZ2UvR2l0L3R5cGVqcy9zcmMvdHVubmVsLmpzIiwiZDovRGV2IFN0b3JhZ2UvR2l0L3R5cGVqcy9zcmMvdHlwZS5qcyIsImQ6L0RldiBTdG9yYWdlL0dpdC90eXBlanMvc3JjL3V0aWwuanMiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXh0VGljayIsImNhblNldEltbWVkaWF0ZSIsIndpbmRvdyIsInNldEltbWVkaWF0ZSIsImNhblBvc3QiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmIiwicXVldWUiLCJldiIsInNvdXJjZSIsImRhdGEiLCJzdG9wUHJvcGFnYXRpb24iLCJsZW5ndGgiLCJmbiIsInNoaWZ0IiwicHVzaCIsInNldFRpbWVvdXQiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwiYmluZGluZyIsIkVycm9yIiwiY3dkIiwiY2hkaXIiLCJQVUJMSUMiLCJQUklWQVRFIiwiUFJPVEVDVEVEIiwiaW5pdCIsInR5cGUiLCJwdWIiLCJhcmdzIiwiY3RvciIsImluaXRzIiwib24iLCJTQ09QRSIsInNjb3BlIiwib2ZmIiwic2VsZiIsIl9wdWIiLCJidWlsZCIsImV4cG9zZSIsIiR0eXBlIiwiJHNjb3BlIiwidHVubmVsIiwidmFsdWUiLCJhcHBseSIsInV0aWwiLCJlYWNoIiwibWl4aW5zIiwibWl4aW4iLCJvcGVuIiwiaW5uZXIiLCJjbG9zZSIsImNyZWF0ZVByb3h5IiwicGFyZW50IiwibWVtYmVycyIsInBhcmFtcyIsImNhbGxzdXBlciIsImVycm9ycyIsIkluaXRpYWxpemF0aW9uRXJyb3IiLCJtZW1iZXIiLCJuYW1lIiwibWV0aG9kIiwiYnVpbGRNZXRob2QiLCJpc0V2ZW50IiwiYnVpbGRFdmVudCIsImJ1aWxkUHJvcGVydHkiLCJzcGVjaWFsIiwiQ1RPUiIsImFjY2VzcyIsImlzVmlydHVhbCIsInNyY1R5cGUiLCJzcmNPYmoiLCJkc3RUeXBlIiwiZHN0T2JqIiwiYWRkUHJvcGVydHkiLCJnZXQiLCJyZWFkT25seUdldCIsInNldCIsIndyaXRlT25seVNldCIsInRlbXAiLCJfaW5pdCIsIl9zdXBlciIsImkiLCJjYWxsIiwiaW5kZXhPZiIsIm1ha2VBcnJheSIsImFyZ3VtZW50cyIsInNwbGljZSIsInJlc3VsdCIsImFjY2Vzc29yIiwiX3ZhbHVlIiwiYWNjZXNzb3JzIiwiaGFuZGxlcnMiLCJhZGRIYW5kbGVyIiwiaGFuZGxlciIsInJlbW92ZUhhbmRsZXIiLCJyYWlzZSIsImxlbiIsIm9iaiIsImVudmlyb25tZW50IiwiSUU4IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImhhc093biIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiQWNjZXNzVmlvbGF0aW9uRXJyb3IiLCJyZXF1aXJlIiwicmVzb2x2ZSIsInByb21pc2UiLCJ4IiwiUkVKRUNURUQiLCJUeXBlRXJyb3IiLCJ0aGVuIiwiY2FsbGVkIiwiZSIsImlzRnVuYyIsInkiLCJGVUxGSUxMRUQiLCJyIiwiRGVmZXJyZWQiLCJQRU5ESU5HIiwiUHJvbWlzZSIsImRlZiIsInRoaXMiLCJzdGF0ZSIsIkludmFsaWRPcGVyYXRpb25FcnJvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImFzeW5jIiwiX3ByeSIsImVucXVldWUiLCJoYW5kbGUiLCJkb25lIiwiY2FsbGJhY2siLCJmYWlsIiwiYWx3YXlzIiwiX3NldCIsIl9fZW5xdWV1ZSIsIl9oYW5kbGVyIiwicnVuIiwidW5kZWZpbmVkIiwiX19oYW5kbGUiLCJleHRlbmQiLCJfX3NldCIsInJlamVjdCIsInJlYXNvbiIsIndoZW4iLCJwcm9taXNlcyIsImRlZmVycmVkIiwidGFza3MiLCJpc0FycmF5IiwicHJvZ3Jlc3MiLCJyZXN1bHRzIiwidGFzayIsImluZGV4IiwiY3JlYXRlIiwiU2NvcGUiLCJjdG9yRGVmaW5lZCIsIlR5cGUiLCJoYXMiLCJUWVBFX0NIRUNLIiwidHlwZUNoZWNrUmVzdWx0IiwiZGVmaW5lU2NvcGUiLCJnZXRQbGFpbkRPTU9iamVjdCIsImFwcGx5UHJvdG90eXBlTWVtYmVycyIsIlBVQiIsIkJhc2UiLCJrZXlzIiwiRGVmaW5pdGlvbkVycm9yIiwiaXNUeXBlT3VycyIsInQiLCJwcm90b3R5cGUiLCJpbmZvIiwicGFyc2VNZW1iZXIiLCJ2YWxpZGF0ZU1lbWJlciIsIiRpbmplY3QiLCJwb3AiLCJkZWZpbmVNZXRob2QiLCJldmVudHMiLCJpbmNsdWRlIiwidHlwZXMiLCJjaGVja01peGluRm9yQ2lyY3VsYXJSZWZlcmVuY2UiLCJtIiwidHdvTGV0dGVyIiwic3Vic3RyIiwibW9kaWZpZXIiLCJHRVRfQUNDRVNTIiwiSVNfVklSVFVBTCIsIkdFVF9QUkVGSVgiLCJpc01lbWJlckRlZmluZWQiLCJtYXRjaCIsInRvU3RyaW5nIiwic3BsaXQiLCJwYXJhbSIsInRyaW0iLCJmblRlc3QiLCJ0ZXN0IiwicHJvcGVydHkiLCJ0eXBlT2YiLCJkaWZmZXJlbnQiLCJ0b0xvd2VyQ2FzZSIsIkFDQ0VTUyIsInRvVXBwZXJDYXNlIiwicHJvdG8iLCJjb25zdHJ1Y3RvciIsInByb3AiLCJvdmVyd3JpdGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJfXyIsIl8iLCIkIiwiXyQiLCJ4eXoiLCJtZXNzYWdlIiwiQXJndW1lbnRFcnJvciIsImZsYWciLCJQUk9WSURFUiIsIkxBWllfUFJPVklERVIiLCJJbmplY3RvciIsImNvbnRhaW5lciIsImJpbmQiLCJzZXJ2aWNlIiwiaXNTdHJpbmciLCJ0byIsInByb3ZpZGVyIiwicmVnaXN0ZXIiLCJjb25maWciLCJhc1NpbmdsZXRvbiIsIl9yZXNvbHZlIiwicmVzb2x2ZWQiLCJ3aGVuRm9yIiwic2VydmljZXMiLCJmaWx0ZXIiLCJzbGljZSIsInVuYmluZCIsImJpbmRpbmdzIiwiZmxlbiIsImIiLCJibGVuIiwidGFyZ2V0IiwicmVzb2x2ZVRhcmdldCIsInJlY2lwZSIsImZhY3RvcnkiLCJtYWtlRmFjdG9yeSIsInRoZW9yeSIsImlzUHJvdmlkZXIiLCJhdXRvQmluZCIsImdyYXBoIiwicmVnaXN0ZXJHcmFwaCIsIl9fcmVnaXN0ZXIiLCJpbmplY3QiLCJfX3JlZ2lzdGVyR3JhcGgiLCJwYXRoIiwicHJlZml4IiwiaXNQbGFpbk9iamVjdCIsIl9fbWFrZUZhY3RvcnkiLCJ0b0NvbXBvbmVudCIsInBvc2l0aW9uIiwiY2FjaGUiLCJpc0xhenkiLCJtYWtlTGF6eUZhY3RvcnkiLCJuZXh0IiwiZ2VuZXJhdGlvbnMiLCJyb290IiwiY3VycmVudCIsImNvbXBvbmVudCIsImRlcGVuZGVuY2llcyIsImRlcGVuZGVuY3kiLCJyZXZlcnNlIiwiZ2VuZXJhdGlvbiIsImNvbmNhdCIsIl9fbWFrZUxhenlGYWN0b3J5IiwiX19yZXNvbHZlVGFyZ2V0IiwibG9hZCIsIm1vZHVsZXMiLCJtYXAiLCJwbGFuIiwibWlzc2luZyIsIlJlZ0V4cCIsInJlcGxhY2UiLCJzdmMiLCJ1cGRhdGUiLCJnZXRFeGVjdXRpb25QbGFuIiwiam9pbiIsIl9fZ2V0RXhlY3V0aW9uUGxhbiIsIndhdGNoRm9yIiwidGhlb3JpemUiLCJ3YXRjaGVzIiwidG9SZWNpcGUiLCJldmFsdWF0ZSIsIl9fdGhlb3JpemUiLCJfX2V2YWx1YXRlIiwiZGVzdGluYXRpb24iLCJmaW5kIiwicHJvdmlkZXJPZiIsImxhenlQcm92aWRlck9mIiwiZGVmaW5lIiwiaW5qZWN0b3IiLCJvZiIsImRlZmVyIiwiaXNBcnJheUxpa2UiLCJub2RlVHlwZSIsIml0ZW0iLCJvYmplY3QiLCJyZXQiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsImFycmF5IiwiaXRlbXMiLCJjb250ZXh0IiwiQXJyYXkiXSwibWFwcGluZ3MiOiI7QUFFQSxHQUFJQSxTQUFVQyxPQUFPQyxVQUVyQkYsU0FBUUcsU0FBVyxXQUNmLEdBQUlDLEdBQW9DLG1CQUFYQyxTQUMxQkEsT0FBT0MsYUFDTkMsRUFBNEIsbUJBQVhGLFNBQ2xCQSxPQUFPRyxhQUFlSCxPQUFPSSxnQkFHaEMsSUFBSUwsRUFDQSxNQUFPLFVBQVVNLEdBQUssTUFBT0wsUUFBT0MsYUFBYUksR0FHckQsSUFBSUgsRUFBUyxDQUNULEdBQUlJLEtBV0osT0FWQU4sUUFBT0ksaUJBQWlCLFVBQVcsU0FBVUcsR0FDekMsR0FBSUEsRUFBR0MsU0FBV1IsUUFBc0IsaUJBQVpPLEVBQUdFLE9BQzNCRixFQUFHRyxrQkFDQ0osRUFBTUssT0FBUyxHQUFHLENBQ2xCLEdBQUlDLEdBQUtOLEVBQU1PLE9BQ2ZELFFBR1QsR0FFSSxTQUFrQkEsR0FDckJOLEVBQU1RLEtBQUtGLEdBQ1haLE9BQU9HLFlBQVksZUFBZ0IsTUFJM0MsTUFBTyxVQUFrQlMsR0FDckJHLFdBQVdILEVBQUksT0FJdkJqQixRQUFRcUIsTUFBUSxVQUNoQnJCLFFBQVFzQixTQUFVLEVBQ2xCdEIsUUFBUXVCLE9BQ1J2QixRQUFRd0IsUUFFUnhCLFFBQVF5QixRQUFVLFdBQ2QsS0FBTSxJQUFJQyxPQUFNLHFDQUlw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QURBRCxFQUFRak8sVUFBV2lPLEdBQ2RFLE1BQU01SSxVQUFVeUcsSUFDakIsTUFBT2lDLEdBQU1qQyxJQUFLL0ksRUFBVWlMLEVBRzVCLElBQUkvTixLQUNKMUMsTUFBTXdRLEVBQU8sU0FBVU4sRUFBTXJKLEdBQ3pCbkUsRUFBTzNFLEtBQU15SCxFQUFTbkQsS0FBTW9PLEVBQVNQLEVBQU1ySixNQXhQdkRoSyxPQUFPQyxTQUVIeUYsVUFBV0EsVUFDWHZDLEtBQU1BLEtBQ055SixPQUFRQSxPQUNSbkYsT0FBUUEsT0FDUjRHLFNBQVVBLFNBQ1Z6RSxRQUFTQSxRQUNUNEMsS0FBTUEsS0FDTjNCLEtBQU1BLEtBQ05qRSxPQUFRQSxPQUNSbkIsUUFBU0EsUUFDVDRLLGNBQWVBLGNBQ2ZxQixJQUFLQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbnByb2Nlc3MubmV4dFRpY2sgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYW5TZXRJbW1lZGlhdGUgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5zZXRJbW1lZGlhdGU7XG4gICAgdmFyIGNhblBvc3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5wb3N0TWVzc2FnZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lclxuICAgIDtcblxuICAgIGlmIChjYW5TZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmKSB7IHJldHVybiB3aW5kb3cuc2V0SW1tZWRpYXRlKGYpIH07XG4gICAgfVxuXG4gICAgaWYgKGNhblBvc3QpIHtcbiAgICAgICAgdmFyIHF1ZXVlID0gW107XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoZXYuc291cmNlID09PSB3aW5kb3cgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0pKCk7XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn1cblxuLy8gVE9ETyhzaHR5bG1hbilcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBQVUJMSUM6IFwicHVibGljXCIsXHJcbiAgICBQUklWQVRFOiBcInByaXZhdGVcIixcclxuICAgIFBST1RFQ1RFRDogXCJwcm90ZWN0ZWRcIlxyXG59O1xyXG4iLCJ2YXIgYWNjZXNzID0gcmVxdWlyZSggXCIuL2FjY2Vzc1wiICk7XHJcbnZhciBlbnZpcm9ubWVudCA9IHJlcXVpcmUoIFwiLi9lbnZpcm9ubWVudFwiICk7XHJcbnZhciBlcnJvcnMgPSByZXF1aXJlKCBcIi4vZXJyb3JzXCIgKTtcclxudmFyIGluaXRzID0gcmVxdWlyZSggXCIuL2luaXRzXCIgKTtcclxudmFyIHNwZWNpYWwgPSByZXF1aXJlKCBcIi4vc3BlY2lhbFwiICk7XHJcbnZhciB0dW5uZWwgPSByZXF1aXJlKCBcIi4vdHVubmVsXCIgKTtcclxudmFyIHV0aWwgPSByZXF1aXJlKCBcIi4vdXRpbFwiICk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGluaXQ7XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uIEluaXRpYWxpemVzIHRoZSB0eXBlLlxyXG4gKiBAcGFyYW0ge1R5cGV9IHR5cGUgVGhlIHR5cGUgdG8gaW5pdGlhbGl6ZS5cclxuICogQHBhcmFtIHtPYmplY3R9IHB1YiBUaGUgcHVibGljIGludGVyZmFjZSB0byBpbml0aWFsaXplIG9uLlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIEFyZ3VtZW50cyBmb3IgdGhlIGNvbnN0cnVjdG9yLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGN0b3IgUnVuIHRoZSBjb25zdHJ1Y3Rvci5cclxuICovXHJcbmZ1bmN0aW9uIGluaXQoIHR5cGUsIHB1YiwgYXJncywgY3RvciApXHJcbntcclxuICAgIGluaXRzLm9uKCBpbml0cy5TQ09QRSApO1xyXG4gICAgdmFyIHNjb3BlID0gdHlwZSgpO1xyXG4gICAgaW5pdHMub2ZmKCBpbml0cy5TQ09QRSApO1xyXG5cclxuICAgIHNjb3BlLnNlbGYuX3B1YiA9IHB1YjtcclxuXHJcbiAgICBidWlsZCggdHlwZSwgc2NvcGUgKTtcclxuICAgIGV4cG9zZSggdHlwZSwgc2NvcGUsIHB1YiApO1xyXG5cclxuICAgIHB1Yi4kdHlwZSA9IHR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqIFVzZSBpbiBjb25qdW5jdGlvbiB3aXRoIF9wcnkgdG8gZXhwb3NlIHRoZSBwcml2YXRlIHNjb3BlLlxyXG4gICAgICovXHJcbiAgICBwdWIuJHNjb3BlID0gZnVuY3Rpb24oKVxyXG4gICAge1xyXG4gICAgICAgIGlmICggdHVubmVsLnZhbHVlKCkgPT09IHR5cGUgKVxyXG4gICAgICAgICAgICByZXR1cm4gc2NvcGUuc2VsZjtcclxuICAgIH07XHJcblxyXG4gICAgaWYgKCBjdG9yIClcclxuICAgICAgICBzY29wZS5zZWxmLmN0b3IuYXBwbHkoIHNjb3BlLnNlbGYsIGFyZ3MgKTtcclxuXHJcbiAgICByZXR1cm4gc2NvcGUuc2VsZjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBDcmVhdGVzIHRoZSB0eXBlIG1lbWJlcnMgb24gdGhlIGluc3RhbmNlLlxyXG4gKiBAcGFyYW0ge1R5cGV9IHR5cGUgVGhlIGluc3RhbmNlIHR5cGUuXHJcbiAqIEBwYXJhbSB7U2NvcGV9IHNjb3BlIFRoZSBwcml2YXRlIHNjb3BlIG9mIHRoZSBpbnN0YW5jZS5cclxuICovXHJcbmZ1bmN0aW9uIGJ1aWxkKCB0eXBlLCBzY29wZSApXHJcbntcclxuICAgIC8vIEluc3RhbnRpYXRlIG1peGlucyBhbmQgYWRkIHByb3hpZXMgdG8gdGhlaXIgbWVtYmVycy5cclxuICAgIHV0aWwuZWFjaCggdHlwZS5taXhpbnMsIGZ1bmN0aW9uKCBtaXhpbiApXHJcbiAgICB7XHJcbiAgICAgICAgaW5pdCggbWl4aW4sIHNjb3BlLnNlbGYuX3B1YiwgW10sIGZhbHNlICk7XHJcbiAgICAgICAgdHVubmVsLm9wZW4oIG1peGluICk7XHJcbiAgICAgICAgdmFyIGlubmVyID0gc2NvcGUuc2VsZi5fcHViLiRzY29wZSgpO1xyXG4gICAgICAgIHR1bm5lbC5jbG9zZSgpO1xyXG4gICAgICAgIGNyZWF0ZVByb3h5KCBtaXhpbiwgaW5uZXIsIHR5cGUsIHNjb3BlLnNlbGYgKTtcclxuICAgICAgICBzY29wZS5taXhpbnMucHVzaCggaW5uZXIgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEluc3RhbnRpYXRlIHRoZSBwYXJlbnQuXHJcbiAgICBpZiAoIHR5cGUucGFyZW50ICE9PSBudWxsIClcclxuICAgIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHR5cGUucGFyZW50Lm1lbWJlcnMuY3RvciAmJlxyXG4gICAgICAgICAgICB0eXBlLnBhcmVudC5tZW1iZXJzLmN0b3IucGFyYW1zLmxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgICAgKCAhdHlwZS5tZW1iZXJzLmN0b3IgfHwgIXR5cGUubWVtYmVycy5jdG9yLmNhbGxzdXBlciApXHJcbiAgICAgICAgKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkluaXRpYWxpemF0aW9uRXJyb3IoIFwiQmFzZSBjb25zdHJ1Y3RvciBjb250YWlucyBwYXJhbWV0ZXJzIGFuZCBtdXN0IGJlIGNhbGxlZCBleHBsaWNpdGx5LlwiICk7XHJcblxyXG4gICAgICAgIGluaXRzLm9uKCBpbml0cy5TQ09QRSApO1xyXG4gICAgICAgIHNjb3BlLnBhcmVudCA9IHR5cGUucGFyZW50KCk7XHJcbiAgICAgICAgaW5pdHMub2ZmKCBpbml0cy5TQ09QRSApO1xyXG4gICAgICAgIHNjb3BlLnBhcmVudC5zZWxmLl9wdWIgPSBzY29wZS5zZWxmLl9wdWI7XHJcbiAgICAgICAgYnVpbGQoIHR5cGUucGFyZW50LCBzY29wZS5wYXJlbnQgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQgcHJveGllcyB0byBwYXJlbnQgbWVtYmVycy5cclxuICAgIGlmICggdHlwZS5wYXJlbnQgIT09IG51bGwgKVxyXG4gICAgICAgIGNyZWF0ZVByb3h5KCB0eXBlLnBhcmVudCwgc2NvcGUucGFyZW50LnNlbGYsIHR5cGUsIHNjb3BlLnNlbGYgKTtcclxuXHJcbiAgICAvLyBBZGQgdHlwZSBtZW1iZXJzLlxyXG4gICAgdXRpbC5lYWNoKCB0eXBlLm1lbWJlcnMsIGZ1bmN0aW9uKCBtZW1iZXIsIG5hbWUgKVxyXG4gICAge1xyXG4gICAgICAgIGlmICggbWVtYmVyLm1ldGhvZCApXHJcbiAgICAgICAgICAgIGJ1aWxkTWV0aG9kKCB0eXBlLCBzY29wZSwgbmFtZSwgbWVtYmVyICk7XHJcbiAgICAgICAgZWxzZSBpZiAoIG1lbWJlci5pc0V2ZW50IClcclxuICAgICAgICAgICAgYnVpbGRFdmVudCggdHlwZSwgc2NvcGUsIG5hbWUgKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGJ1aWxkUHJvcGVydHkoIHR5cGUsIHNjb3BlLCBuYW1lLCBtZW1iZXIgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIElmIGEgY29uc3RydWN0b3IgaXNuJ3QgZGVmaW5lZCwgcHJvdmlkZSBhIGRlZmF1bHQgb25lLlxyXG4gICAgaWYgKCAhc2NvcGUuc2VsZi5jdG9yIClcclxuICAgIHtcclxuICAgICAgICBidWlsZE1ldGhvZCggdHlwZSwgc2NvcGUsIHNwZWNpYWwuQ1RPUixcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNhbGxzdXBlcjogZmFsc2UsXHJcbiAgICAgICAgICAgIHBhcmFtczogW10sXHJcbiAgICAgICAgICAgIGFjY2VzczogYWNjZXNzLlBSSVZBVEUsXHJcbiAgICAgICAgICAgIGlzVmlydHVhbDogZmFsc2UsXHJcbiAgICAgICAgICAgIG5hbWU6IHNwZWNpYWwuQ1RPUixcclxuICAgICAgICAgICAgbWV0aG9kOiBmdW5jdGlvbigpIHt9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVByb3h5KCBzcmNUeXBlLCBzcmNPYmosIGRzdFR5cGUsIGRzdE9iaiApXHJcbntcclxuICAgIHV0aWwuZWFjaCggc3JjVHlwZS5tZW1iZXJzLCBmdW5jdGlvbiggbWVtYmVyLCBuYW1lIClcclxuICAgIHtcclxuICAgICAgICAvLyBJZiB0aGUgbWVtYmVyIGlzIHByaXZhdGUgb3IgaWYgaXQncyBiZWVuIG92ZXJyaWRkZW4gYnkgdGhlIGNoaWxkLCBkb24ndCBtYWtlIGEgcmVmZXJlbmNlXHJcbiAgICAgICAgLy8gdG8gdGhlIHBhcmVudCBpbXBsZW1lbnRhdGlvbi5cclxuICAgICAgICBpZiAoIG1lbWJlci5hY2Nlc3MgPT09IGFjY2Vzcy5QUklWQVRFIHx8IGRzdFR5cGUubWVtYmVyc1sgbmFtZSBdICkgcmV0dXJuO1xyXG5cclxuICAgICAgICBpZiAoIG1lbWJlci5tZXRob2QgfHwgbWVtYmVyLmlzRXZlbnQgKVxyXG4gICAgICAgICAgICBkc3RPYmpbIG5hbWUgXSA9IHNyY09ialsgbmFtZSBdO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGFkZFByb3BlcnR5KCBkc3RPYmosIG5hbWUsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGdldDogIW1lbWJlci5nZXQgfHwgbWVtYmVyLmdldC5hY2Nlc3MgPT09IGFjY2Vzcy5QUklWQVRFID8gcmVhZE9ubHlHZXQoIG5hbWUgKSA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzcmNPYmpbIG5hbWUgXTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6ICFtZW1iZXIuc2V0IHx8IG1lbWJlci5zZXQuYWNjZXNzID09PSBhY2Nlc3MuUFJJVkFURSA/IHdyaXRlT25seVNldCggbmFtZSApIDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNyY09ialsgbmFtZSBdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uIENyZWF0ZXMgYSBtZXRob2QgbWVtYmVyLlxyXG4gKiBAcGFyYW0ge1R5cGV9IHR5cGVcclxuICogQHBhcmFtIHtTY29wZX0gc2NvcGVcclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICogQHBhcmFtIHtPYmplY3R9IG1lbWJlclxyXG4gKi9cclxuZnVuY3Rpb24gYnVpbGRNZXRob2QoIHR5cGUsIHNjb3BlLCBuYW1lLCBtZW1iZXIgKVxyXG57XHJcbiAgICBpZiAoIG5hbWUgPT09IFwiY3RvclwiIClcclxuICAgIHtcclxuICAgICAgICBzY29wZS5zZWxmLmN0b3IgPSBmdW5jdGlvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBIaWRlIHRoZSBjb25zdHJ1Y3RvciBiZWNhdXNlIGl0IHNob3VsZCBuZXZlciBiZSBjYWxsZWQgYWdhaW4uXHJcbiAgICAgICAgICAgIGRlbGV0ZSBzY29wZS5zZWxmLmN0b3I7XHJcblxyXG4gICAgICAgICAgICAvLyBSdW4gZWFjaCBtaXhpbidzIGNvbnN0cnVjdG9yLiBJZiB0aGUgY29uc3RydWN0b3IgY29udGFpbnMgcGFyYW1ldGVycywgYWRkIGl0IHRvIHRoZSBxdWV1ZS5cclxuICAgICAgICAgICAgdmFyIHF1ZXVlID0gW107XHJcbiAgICAgICAgICAgIHZhciB0ZW1wID0ge1xyXG4gICAgICAgICAgICAgICAgX2luaXQ6IHNjb3BlLnNlbGYuX2luaXQsXHJcbiAgICAgICAgICAgICAgICBfc3VwZXI6IHNjb3BlLnNlbGYuX3N1cGVyXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB1dGlsLmVhY2goIHR5cGUubWl4aW5zLCBmdW5jdGlvbiggbWl4aW4sIGkgKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIG1peGluLm1lbWJlcnMuY3RvciApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtaXhpbi5tZW1iZXJzLmN0b3IucGFyYW1zLmxlbmd0aCA+IDAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKCBtaXhpbiApO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWl4aW4ubWVtYmVycy5jdG9yLm1ldGhvZC5jYWxsKCBzY29wZS5taXhpbnNbIGkgXSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIG1peGlucyBuZWVkIHRvIGJlIGluaXRpYWxpemVkIGV4cGxpY2l0bHksIGNyZWF0ZSBhbiBfaW5pdCgpIG1ldGhvZC5cclxuICAgICAgICAgICAgaWYgKCBxdWV1ZS5sZW5ndGggPiAwIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2NvcGUuc2VsZi5faW5pdCA9IGZ1bmN0aW9uKCBtaXhpbiApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlJ3JlIGluaXRpYWxpemluZyBhIHZhbGlkIG1peGluLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gdXRpbC5pbmRleE9mKCBxdWV1ZSwgbWl4aW4gKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIGkgPT09IC0xIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5Jbml0aWFsaXphdGlvbkVycm9yKCBcIk1peGluIGlzIG5vdCBkZWZpbmVkIGZvciB0aGlzIHR5cGUgb3IgaGFzIGFscmVhZHkgYmVlbiBpbml0aWFsaXplZC5cIiApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IHV0aWwubWFrZUFycmF5KCBhcmd1bWVudHMgKTtcclxuICAgICAgICAgICAgICAgICAgICBhcmdzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWl4aW4ubWVtYmVycy5jdG9yLm1ldGhvZC5hcHBseSggc2NvcGUubWl4aW5zWyB1dGlsLmluZGV4T2YoIHR5cGUubWl4aW5zLCBtaXhpbiApIF0sIGFyZ3MgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIG1peGluIGZyb20gdGhlIHF1ZXVlLlxyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnNwbGljZSggaSwgMSApO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQ2FsbCB0aGUgcGFyZW50IGNvbnN0cnVjdG9yIGlmIGl0IGlzIHBhcmFtZXRlcmxlc3MuIE90aGVyd2lzZSwgYXNzaWduIGl0IHRvIHRoaXMuX3N1cGVyLlxyXG4gICAgICAgICAgICBpZiAoIHR5cGUucGFyZW50ICE9PSBudWxsICYmIHR5cGUucGFyZW50Lm1lbWJlcnMuY3RvciApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmICggdHlwZS5wYXJlbnQubWVtYmVycy5jdG9yLnBhcmFtcy5sZW5ndGggPiAwIClcclxuICAgICAgICAgICAgICAgICAgICBzY29wZS5zZWxmLl9zdXBlciA9IHNjb3BlLnBhcmVudC5zZWxmLmN0b3I7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUucGFyZW50LnNlbGYuY3RvcigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBtZW1iZXIubWV0aG9kLmFwcGx5KCBzY29wZS5zZWxmLCBhcmd1bWVudHMgKTtcclxuICAgICAgICAgICAgc2NvcGUuc2VsZi5fc3VwZXIgPSB0ZW1wLl9zdXBlcjtcclxuICAgICAgICAgICAgc2NvcGUuc2VsZi5faW5pdCA9IHRlbXAuX2luaXQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHF1ZXVlLmxlbmd0aCA+IDAgKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkluaXRpYWxpemF0aW9uRXJyb3IoIFwiU29tZSBtaXhpbnMgd2VyZSBub3QgaW5pdGlhbGl6ZWQuIFBsZWFzZSBtYWtlIHN1cmUgdGhlIGNvbnN0cnVjdG9yIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBcImNhbGxzIHRoaXMuX2luaXQoKSBmb3IgZWFjaCBtaXhpbiBoYXZpbmcgcGFyYW1ldGVycyBpbiBpdHMgY29uc3RydWN0b3IuXCIgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBzY29wZS5wYXJlbnQgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgc2NvcGUucGFyZW50LnNlbGZbIG5hbWUgXSAmJlxyXG4gICAgICAgICAgICBtZW1iZXIuY2FsbHN1cGVyXHJcbiAgICAgICAgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIF9zdXBlciA9IHNjb3BlLnBhcmVudC5zZWxmWyBuYW1lIF07XHJcbiAgICAgICAgICAgIHNjb3BlLnNlbGZbIG5hbWUgXSA9IGZ1bmN0aW9uKClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBzY29wZS5zZWxmLl9zdXBlcjtcclxuICAgICAgICAgICAgICAgIHNjb3BlLnNlbGYuX3N1cGVyID0gX3N1cGVyO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG1lbWJlci5tZXRob2QuYXBwbHkoIHNjb3BlLnNlbGYsIGFyZ3VtZW50cyApO1xyXG4gICAgICAgICAgICAgICAgc2NvcGUuc2VsZi5fc3VwZXIgPSB0ZW1wO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2NvcGUuc2VsZlsgbmFtZSBdID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVtYmVyLm1ldGhvZC5hcHBseSggc2NvcGUuc2VsZiwgYXJndW1lbnRzICk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uIENyZWF0ZXMgYSBwcm9wZXJ0eSBtZW1iZXIuXHJcbiAqIEBwYXJhbSB7VHlwZX0gdHlwZVxyXG4gKiBAcGFyYW0ge1Njb3BlfSBzY29wZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gKiBAcGFyYW0ge09iamVjdH0gbWVtYmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBidWlsZFByb3BlcnR5KCB0eXBlLCBzY29wZSwgbmFtZSwgbWVtYmVyIClcclxue1xyXG4gICAgZnVuY3Rpb24gYWNjZXNzb3IoIG1ldGhvZCwgX3N1cGVyIClcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIHRlbXAgPSB7XHJcbiAgICAgICAgICAgICAgICBfc3VwZXI6IHNjb3BlLnNlbGYuX3N1cGVyLFxyXG4gICAgICAgICAgICAgICAgX3ZhbHVlOiBzY29wZS5zZWxmLl92YWx1ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzY29wZS5zZWxmLl9zdXBlciA9IF9zdXBlcjtcclxuICAgICAgICAgICAgc2NvcGUuc2VsZi5fdmFsdWUgPSBmdW5jdGlvbiggdmFsdWUgKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIGFyZ3VtZW50cy5sZW5ndGggKVxyXG4gICAgICAgICAgICAgICAgICAgIF92YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG1ldGhvZC5hcHBseSggc2NvcGUuc2VsZiwgYXJndW1lbnRzICk7XHJcbiAgICAgICAgICAgIHNjb3BlLnNlbGYuX3N1cGVyID0gdGVtcC5fc3VwZXI7XHJcbiAgICAgICAgICAgIHNjb3BlLnNlbGYuX3ZhbHVlID0gdGVtcC5fdmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX3ZhbHVlID0gbWVtYmVyLnZhbHVlO1xyXG4gICAgdmFyIGFjY2Vzc29ycyA9IHt9O1xyXG4gICAgaWYgKCBtZW1iZXIuZ2V0IClcclxuICAgIHtcclxuICAgICAgICBhY2Nlc3NvcnMuZ2V0ID0gYWNjZXNzb3IoXHJcbiAgICAgICAgICAgIG1lbWJlci5nZXQubWV0aG9kLFxyXG4gICAgICAgICAgICAhbWVtYmVyLmdldC5jYWxsc3VwZXIgfHwgc2NvcGUucGFyZW50ID09PSBudWxsID8gbnVsbCA6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS5wYXJlbnQuc2VsZlsgbmFtZSBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgICBhY2Nlc3NvcnMuZ2V0ID0gcmVhZE9ubHlHZXQoIG5hbWUgKTtcclxuICAgIH1cclxuICAgIGlmICggbWVtYmVyLnNldCApXHJcbiAgICB7XHJcbiAgICAgICAgYWNjZXNzb3JzLnNldCA9IGFjY2Vzc29yKFxyXG4gICAgICAgICAgICBtZW1iZXIuc2V0Lm1ldGhvZCxcclxuICAgICAgICAgICAgIW1lbWJlci5zZXQuY2FsbHN1cGVyIHx8IHNjb3BlLnBhcmVudCA9PT0gbnVsbCA/IG51bGwgOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5wYXJlbnQuc2VsZlsgbmFtZSBdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICAgIGFjY2Vzc29ycy5zZXQgPSB3cml0ZU9ubHlTZXQoIG5hbWUgKTtcclxuICAgIH1cclxuICAgIGFkZFByb3BlcnR5KCBzY29wZS5zZWxmLCBuYW1lLCBhY2Nlc3NvcnMgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYnVpbGRFdmVudCggdHlwZSwgc2NvcGUsIG5hbWUgKVxyXG57XHJcbiAgICB2YXIgaGFuZGxlcnMgPSBbXTtcclxuICAgIHNjb3BlLnNlbGZbIG5hbWUgXSA9XHJcbiAgICB7XHJcbiAgICAgICAgYWRkSGFuZGxlcjogZnVuY3Rpb24oIGhhbmRsZXIgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaGFuZGxlcnMucHVzaCggaGFuZGxlciApO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlbW92ZUhhbmRsZXI6IGZ1bmN0aW9uKCBoYW5kbGVyIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBpID0gdXRpbC5pbmRleE9mKCBoYW5kbGVycywgaGFuZGxlciApO1xyXG4gICAgICAgICAgICBpZiAoIGkgPiAtMSApXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoIGksIDEgKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByYWlzZTogZnVuY3Rpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGkgPSAwLCBsZW4gPSBoYW5kbGVycy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAoIDsgaSA8IGxlbjsgaSsrIClcclxuICAgICAgICAgICAgICAgIGhhbmRsZXJzWyBpIF0uYXBwbHkoIHNjb3BlLnNlbGYuX3B1YiwgYXJndW1lbnRzICk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBDcmVhdGVzIHJlZmVyZW5jZXMgdG8gdGhlIHB1YmxpYyBtZW1iZXJzIG9mIHRoZSB0eXBlIG9uIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxyXG4gKiBAcGFyYW0ge1R5cGV9IHR5cGUgVGhlIHR5cGUgYmVpbmcgaW5zdGFudGlhdGVkLlxyXG4gKiBAcGFyYW0ge1Njb3BlfSBzY29wZSBUaGUgdHlwZSBpbnN0YW5jZS5cclxuICogQHBhcmFtIHtPYmplY3R9IHB1YiBUaGUgcHVibGljIGludGVyZmFjZS5cclxuICovXHJcbmZ1bmN0aW9uIGV4cG9zZSggdHlwZSwgc2NvcGUsIHB1YiApXHJcbntcclxuICAgIGlmICggdHlwZS5wYXJlbnQgIT09IG51bGwgKVxyXG4gICAgICAgIGV4cG9zZSggdHlwZS5wYXJlbnQsIHNjb3BlLnBhcmVudCwgcHViICk7XHJcblxyXG4gICAgdXRpbC5lYWNoKCB0eXBlLm1lbWJlcnMsIGZ1bmN0aW9uKCBtZW1iZXIsIG5hbWUgKVxyXG4gICAge1xyXG4gICAgICAgIGlmICggbWVtYmVyLmFjY2VzcyAhPT0gYWNjZXNzLlBVQkxJQyApXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgaWYgKCBtZW1iZXIubWV0aG9kIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHB1YlsgbmFtZSBdID0gc2NvcGUuc2VsZlsgbmFtZSBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICggbWVtYmVyLmlzRXZlbnQgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcHViWyBuYW1lIF0gPVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhZGRIYW5kbGVyOiBzY29wZS5zZWxmWyBuYW1lIF0uYWRkSGFuZGxlcixcclxuICAgICAgICAgICAgICAgIHJlbW92ZUhhbmRsZXI6IHNjb3BlLnNlbGZbIG5hbWUgXS5yZW1vdmVIYW5kbGVyXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGFkZFByb3BlcnR5KCBwdWIsIG5hbWUsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGdldDogIW1lbWJlci5nZXQgfHwgbWVtYmVyLmdldC5hY2Nlc3MgIT09IGFjY2Vzcy5QVUJMSUMgPyByZWFkT25seUdldCggbmFtZSApIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLnNlbGZbIG5hbWUgXTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6ICFtZW1iZXIuc2V0IHx8IG1lbWJlci5zZXQuYWNjZXNzICE9PSBhY2Nlc3MuUFVCTElDID8gd3JpdGVPbmx5U2V0KCBuYW1lICkgOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuc2VsZlsgbmFtZSBdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEFkZHMgYSBwcm9wZXJ0eSB0byBhbiBvYmplY3QuXHJcbiAqIGh0dHA6Ly9qb2huZHllci5uYW1lL25hdGl2ZS1icm93c2VyLWdldC1zZXQtcHJvcGVydGllcy1pbi1qYXZhc2NyaXB0L1xyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBhY2Nlc3NvcnNcclxuICovXHJcbmZ1bmN0aW9uIGFkZFByb3BlcnR5KCBvYmosIG5hbWUsIGFjY2Vzc29ycyApXHJcbntcclxuICAgIC8vIElFOCBhcHBhcmVudGx5IGRvZXNuJ3Qgc3VwcG9ydCB0aGlzIGNvbmZpZ3VyYXRpb24gb3B0aW9uLlxyXG4gICAgaWYgKCAhZW52aXJvbm1lbnQuSUU4IClcclxuICAgICAgICBhY2Nlc3NvcnMuZW51bWVyYWJsZSA9IHRydWU7XHJcblxyXG4gICAgYWNjZXNzb3JzLmNvbmZpZ3VyYWJsZSA9IHRydWU7XHJcblxyXG4gICAgLy8gSUU4IHJlcXVpcmVzIHRoYXQgd2UgZGVsZXRlIHRoZSBwcm9wZXJ0eSBmaXJzdCBiZWZvcmUgcmVjb25maWd1cmluZyBpdC5cclxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9kZWZpbmVQcm9wZXJ0eVxyXG4gICAgaWYgKCBlbnZpcm9ubWVudC5JRTggJiYgdXRpbC5oYXNPd24oIG9iaiwgbmFtZSApIClcclxuICAgICAgICBkZWxldGUgb2JqWyBuYW1lIF07XHJcblxyXG4gICAgLy8gb2JqIG11c3QgYmUgYSBET00gb2JqZWN0IGluIElFOFxyXG4gICAgaWYgKCBPYmplY3QuZGVmaW5lUHJvcGVydHkgKVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb2JqLCBuYW1lLCBhY2Nlc3NvcnMgKTtcclxuICAgIGVsc2VcclxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkluaXRpYWxpemF0aW9uRXJyb3IoIFwiSmF2YVNjcmlwdCBwcm9wZXJ0aWVzIGFyZSBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3Nlci5cIiApO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZWFkT25seUdldCggbmFtZSApIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkFjY2Vzc1Zpb2xhdGlvbkVycm9yKCBcIkNhbm5vdCByZWFkIGZyb20gd3JpdGUgb25seSBwcm9wZXJ0eSAnXCIgKyBuYW1lICsgXCInLlwiICk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiB3cml0ZU9ubHlTZXQoIG5hbWUgKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5BY2Nlc3NWaW9sYXRpb25FcnJvciggXCJDYW5ub3QgYXNzaWduIHRvIHJlYWQgb25seSBwcm9wZXJ0eSAnXCIgKyBuYW1lICsgXCInLlwiICk7XHJcbiAgICB9O1xyXG59XHJcbiIsInZhciBwcm9jZXNzPXJlcXVpcmUoXCJfX2Jyb3dzZXJpZnlfcHJvY2Vzc1wiKTt2YXIgZXJyb3JzID0gcmVxdWlyZSggXCIuL2Vycm9yc1wiICk7XHJcbnZhciB0eXBlID0gcmVxdWlyZSggXCIuL2RlZmluZVwiICk7XHJcbnZhciB1dGlsID0gcmVxdWlyZSggXCIuL3V0aWxcIiApO1xyXG5cclxudmFyIERlZmVycmVkID0gcmVxdWlyZSggXCIuL2RlZmVycmVkXCIgKTtcclxuXHJcbi8vIDIuMVxyXG52YXIgUEVORElORyA9IFwicGVuZGluZ1wiO1xyXG52YXIgRlVMRklMTEVEID0gXCJmdWxmaWxsZWRcIjtcclxudmFyIFJFSkVDVEVEID0gXCJyZWplY3RlZFwiO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvbiBTYXRpc2ZpZXMgMi4zIG9mIHRoZSBQcm9taXNlL0ErIHNwZWMuXHJcbiAqIEBwYXJhbSB7UHJvbWlzZX0gcHJvbWlzZVxyXG4gKiBAcGFyYW0geyp9IHhcclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbmZ1bmN0aW9uIHJlc29sdmUoIHByb21pc2UsIHggKVxyXG57XHJcbiAgICAvLyAyLjMuMVxyXG4gICAgaWYgKCB4ID09PSBwcm9taXNlLl9wdWIgKVxyXG4gICAge1xyXG4gICAgICAgIHByb21pc2Uuc2V0KCBSRUpFQ1RFRCwgbmV3IFR5cGVFcnJvciggXCIyLjMuMSBBIHByb21pc2UgcmV0dXJuZWQgZnJvbSBvbkZ1bGZpbGxlZCBjYW5ub3QgcmVmZXIgdG8gaXRzZWxmLlwiICkgKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIDIuMy4zXHJcbiAgICBpZiAoIHggKVxyXG4gICAge1xyXG4gICAgICAgIHZhciB0aGVuLCBjYWxsZWQgPSBmYWxzZTtcclxuICAgICAgICB0cnlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIDIuMy4zLjFcclxuICAgICAgICAgICAgaWYgKCB1dGlsLmhhc093biggeCwgXCJ0aGVuXCIgKSApXHJcbiAgICAgICAgICAgICAgICB0aGVuID0geC50aGVuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoIGUgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gMi4zLjMuMlxyXG4gICAgICAgICAgICBwcm9taXNlLnNldCggUkVKRUNURUQsIGUgKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDIuMy4zLjNcclxuICAgICAgICBpZiAoIHV0aWwuaXNGdW5jKCB0aGVuICkgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoZW4uY2FsbCggeCxcclxuICAgICAgICAgICAgICAgICAgICAvLyAyLjMuMy4zLjFcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiggeSApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAyLjMuMy4zLjNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhY2FsbGVkIClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIXJlc29sdmUoIHByb21pc2UsIHkgKSApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMi4zLjRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnNldCggRlVMRklMTEVELCB5ICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIDIuMy4zLjMuMlxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCByIClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIuMy4zLjMuM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFjYWxsZWQgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5zZXQoIFJFSkVDVEVELCByICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoICggZSApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIDIuMy4zLjMuNFxyXG4gICAgICAgICAgICAgICAgaWYgKCAhY2FsbGVkIClcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnNldCggUkVKRUNURUQsIGUgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbnZhciBQcm9taXNlID0gdHlwZSgpLmRlZihcclxue1xyXG4gICAgY3RvcjogZnVuY3Rpb24oKVxyXG4gICAge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICB0aGlzLnF1ZXVlID0gW107XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFBFTkRJTkc7XHJcbiAgICAgICAgdGhpcy5yZXN1bHQgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24oKVxyXG4gICAge1xyXG4gICAgICAgIGlmICggdGhpcy5zdGF0ZSA9PT0gUkVKRUNURUQgKVxyXG4gICAgICAgICAgICB0aHJvdyB0aGlzLnJlc3VsdDtcclxuICAgICAgICBlbHNlIGlmICggdGhpcy5zdGF0ZSA9PT0gUEVORElORyApXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZE9wZXJhdGlvbkVycm9yKCBcIlByb21pc2UgaXMgc3RpbGwgaW4gcGVuZGluZyBzdGF0ZS5cIiApO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3VsdDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIFNhdGlzZmllcyAyLjIgb2YgdGhlIFByb21pc2UvQSsgc3BlYy5cclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gW29uRnVsZmlsbGVkXVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBbb25SZWplY3RlZF1cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FzeW5jXVxyXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgdGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBhc3luYyApXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLl9wcnkoIG5ldyBQcm9taXNlKCkgKTtcclxuICAgICAgICBhc3luYyA9IGFzeW5jID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgICAgICB0aGlzLmVucXVldWUoIHRoaXMuaGFuZGxlKCBwcm9taXNlLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCApLCBhc3luYyApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlLl9wdWI7XHJcbiAgICB9LFxyXG5cclxuICAgIGRvbmU6IGZ1bmN0aW9uKCBjYWxsYmFjaywgYXN5bmMgKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMudGhlbiggY2FsbGJhY2ssIG51bGwsIGFzeW5jICk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3B1YjtcclxuICAgIH0sXHJcblxyXG4gICAgZmFpbDogZnVuY3Rpb24oIGNhbGxiYWNrLCBhc3luYyApXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy50aGVuKCBudWxsLCBjYWxsYmFjaywgYXN5bmMgKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcHViO1xyXG4gICAgfSxcclxuXHJcbiAgICBhbHdheXM6IGZ1bmN0aW9uKCBjYWxsYmFjaywgYXN5bmMgKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMudGhlbiggY2FsbGJhY2ssIGNhbGxiYWNrLCBhc3luYyApO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wdWI7XHJcbiAgICB9LFxyXG5cclxuICAgIF9zZXQ6IGZ1bmN0aW9uKCBzdGF0ZSwgcmVzdWx0IClcclxuICAgIHtcclxuICAgICAgICBpZiAoIHRoaXMuc3RhdGUgPT09IFBFTkRJTkcgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgICAgICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcclxuICAgICAgICAgICAgdmFyIGkgPSAwLCBsZW4gPSB0aGlzLnF1ZXVlLmxlbmd0aDtcclxuICAgICAgICAgICAgZm9yICggOyBpIDwgbGVuOyBpKysgKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWV1ZVsgaSBdKCBzdGF0ZSwgcmVzdWx0ICk7XHJcbiAgICAgICAgICAgIHRoaXMucXVldWUgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9fZW5xdWV1ZTogZnVuY3Rpb24oIGhhbmRsZXIsIGFzeW5jIClcclxuICAgIHtcclxuICAgICAgICBpZiAoIGFzeW5jIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBfaGFuZGxlciA9IGhhbmRsZXI7XHJcbiAgICAgICAgICAgIGhhbmRsZXIgPSBmdW5jdGlvbigpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJ1biA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9oYW5kbGVyLmFwcGx5KCB1bmRlZmluZWQsIGFyZ3MgKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCBydW4gKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCB0aGlzLnN0YXRlID09PSBQRU5ESU5HIClcclxuICAgICAgICAgICAgdGhpcy5xdWV1ZS5wdXNoKCBoYW5kbGVyICk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBoYW5kbGVyKCB0aGlzLnN0YXRlLCB0aGlzLnJlc3VsdCApO1xyXG4gICAgfSxcclxuXHJcbiAgICBfX2hhbmRsZTogZnVuY3Rpb24oIHByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkIClcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oIHN0YXRlLCByZXN1bHQgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gc3RhdGUgPT09IEZVTEZJTExFRCA/IG9uRnVsZmlsbGVkIDogb25SZWplY3RlZCwgeDtcclxuICAgICAgICAgICAgLy8gMi4yLjcuM1xyXG4gICAgICAgICAgICAvLyAyLjIuNy40XHJcbiAgICAgICAgICAgIGlmICggIXV0aWwuaXNGdW5jKCBjYWxsYmFjayApIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcHJvbWlzZS5zZXQoIHN0YXRlLCByZXN1bHQgKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0cnlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gMi4yLjVcclxuICAgICAgICAgICAgICAgIHggPSBjYWxsYmFjay5jYWxsKCB1bmRlZmluZWQsIHJlc3VsdCApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoICggZSApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIDIuMi43LjJcclxuICAgICAgICAgICAgICAgIHByb21pc2Uuc2V0KCBSRUpFQ1RFRCwgZSApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIDIuMi43LjFcclxuICAgICAgICAgICAgaWYgKCAhcmVzb2x2ZSggcHJvbWlzZSwgeCApIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gMi4zLjRcclxuICAgICAgICAgICAgICAgIHByb21pc2Uuc2V0KCBGVUxGSUxMRUQsIHggKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0pO1xyXG5cclxudmFyIERlZmVycmVkID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlKCkuZXh0ZW5kKCBQcm9taXNlICkuZGVmKFxyXG57XHJcbiAgICBjdG9yOiBmdW5jdGlvbigpXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucHJvbWlzZSA9XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGVuOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnRoZW4uYXBwbHkoIHNlbGYsIGFyZ3VtZW50cyApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkb25lOiBmdW5jdGlvbigpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuZG9uZS5hcHBseSggc2VsZiwgYXJndW1lbnRzICk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5wcm9taXNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmYWlsOiBmdW5jdGlvbigpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuZmFpbC5hcHBseSggc2VsZiwgYXJndW1lbnRzICk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5wcm9taXNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbHdheXM6IGZ1bmN0aW9uKClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5hbHdheXMuYXBwbHkoIHNlbGYsIGFyZ3VtZW50cyApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucHJvbWlzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYudmFsdWUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIHByb21pc2U6IHsgZ2V0OiBudWxsLCBfX3NldDogbnVsbCB9LFxyXG5cclxuICAgIHJlc29sdmU6IGZ1bmN0aW9uKCByZXN1bHQgKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuc2V0KCBGVUxGSUxMRUQsIHJlc3VsdCApO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wdWI7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlamVjdDogZnVuY3Rpb24oIHJlYXNvbiApXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5zZXQoIFJFSkVDVEVELCByZWFzb24gKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcHViO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbkRlZmVycmVkLndoZW4gPSBmdW5jdGlvbiggcHJvbWlzZXMgKVxyXG57XHJcbiAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcclxuICAgIHZhciB0YXNrcyA9IHV0aWwuaXNBcnJheSggcHJvbWlzZXMgKSA/IHByb21pc2VzIDogdXRpbC5tYWtlQXJyYXkoIGFyZ3VtZW50cyApO1xyXG4gICAgdmFyIHByb2dyZXNzID0gMDtcclxuICAgIHZhciByZXN1bHRzID0gW107XHJcbiAgICB1dGlsLmVhY2goIHRhc2tzLCBmdW5jdGlvbiggdGFzaywgaW5kZXggKVxyXG4gICAge1xyXG4gICAgICAgIHRhc2tcclxuICAgICAgICAgICAgLnRoZW4oIGZ1bmN0aW9uKCB2YWx1ZSApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHNbIGluZGV4IF0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGlmICggKytwcm9ncmVzcyA9PT0gdGFza3MubGVuZ3RoIClcclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCByZXN1bHRzICk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCByZWFzb24gKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoIHJlYXNvbiApO1xyXG4gICAgICAgICAgICB9LCBmYWxzZSApO1xyXG4gICAgfSk7XHJcbiAgICBpZiAoICF0YXNrcy5sZW5ndGggKVxyXG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoIFtdICk7XHJcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxufTtcclxuIiwidmFyIGFjY2VzcyA9IHJlcXVpcmUoIFwiLi9hY2Nlc3NcIiApO1xyXG52YXIgYnVpbGQgPSByZXF1aXJlKCBcIi4vYnVpbGRcIiApO1xyXG52YXIgZW52aXJvbm1lbnQgPSByZXF1aXJlKCBcIi4vZW52aXJvbm1lbnRcIiApO1xyXG52YXIgZXJyb3JzID0gcmVxdWlyZSggXCIuL2Vycm9yc1wiICk7XHJcbnZhciBpbml0cyA9IHJlcXVpcmUoIFwiLi9pbml0c1wiICk7XHJcbnZhciBzcGVjaWFsID0gcmVxdWlyZSggXCIuL3NwZWNpYWxcIiApO1xyXG52YXIgdHVubmVsID0gcmVxdWlyZSggXCIuL3R1bm5lbFwiICk7XHJcbnZhciB1dGlsID0gcmVxdWlyZSggXCIuL3V0aWxcIiApO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGU7XHJcblxyXG52YXIgR0VUX0FDQ0VTUyA9IHtcclxuICAgIFwiX19cIjogYWNjZXNzLlBSSVZBVEUsXHJcbiAgICBcIl9cIjogYWNjZXNzLlBST1RFQ1RFRFxyXG59O1xyXG5cclxudmFyIElTX1ZJUlRVQUwgPSB7XHJcbiAgICBcIiRcIjogdHJ1ZSxcclxuICAgIFwiXyRcIjogdHJ1ZVxyXG59O1xyXG5cclxudmFyIEdFVF9QUkVGSVggPSB7XHJcbiAgICBcIl9fXCI6IDIsXHJcbiAgICBcIl8kXCI6IDIsXHJcbiAgICBcIl9cIiA6IDEsXHJcbiAgICBcIiRcIiA6IDFcclxufTtcclxuXHJcbnZhciBBQ0NFU1MgPSB7fTtcclxuQUNDRVNTWyBhY2Nlc3MuUFVCTElDIF0gPSAxO1xyXG5BQ0NFU1NbIGFjY2Vzcy5QUk9URUNURUQgXSA9IDI7XHJcbkFDQ0VTU1sgYWNjZXNzLlBSSVZBVEUgXSA9IDM7XHJcblxyXG4vKipcclxuICogQSByZWdleCBmb3IgdGVzdGluZyB0aGUgdXNlIG9mIF9zdXBlciBpbnNpZGUgYSBmdW5jdGlvbi5cclxuICpcclxuICogU2ltcGxlIEphdmFTY3JpcHQgSW5oZXJpdGFuY2VcclxuICogQnkgSm9obiBSZXNpZyBodHRwOi8vZWpvaG4ub3JnL1xyXG4gKiBNSVQgTGljZW5zZWQuXHJcbiAqL1xyXG52YXIgZm5UZXN0ID0gL3h5ei8udGVzdCggZnVuY3Rpb24oKSB7IHh5eiA9IDA7IH0gKSA/IC9cXGJfc3VwZXJcXGIvIDogLy4qLztcclxuXHJcbnZhciB0eXBlQ2hlY2tSZXN1bHQgPSBmYWxzZTtcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb24gRGVmaW5lcyBhIG5ldyB0eXBlLlxyXG4gKiBAcmV0dXJuIHtUeXBlfVxyXG4gKlxyXG4gKiBJbnNwaXJlZCBieSBKb2huIFJlc2lnJ3MgXCJTaW1wbGUgSmF2YVNjcmlwdCBJbmhlcml0YW5jZVwiIGNsYXNzLlxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlKClcclxue1xyXG4gICAgdmFyIFNjb3BlID0gbnVsbDtcclxuICAgIHZhciBydW4gPSB0cnVlO1xyXG4gICAgdmFyIGN0b3JEZWZpbmVkID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJmYWNlXHJcbiAgICAgKi9cclxuICAgIHZhciBUeXBlID0gZnVuY3Rpb24oKVxyXG4gICAge1xyXG4gICAgICAgIGlmICggaW5pdHMuaGFzKCBpbml0cy5UWVBFX0NIRUNLICkgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZUNoZWNrUmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIGluaXRzLmhhcyggaW5pdHMuU0NPUEUgKSApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoIFNjb3BlID09PSBudWxsIClcclxuICAgICAgICAgICAgICAgIFNjb3BlID0gZGVmaW5lU2NvcGUoIFR5cGUgKTtcclxuICAgICAgICAgICAgdmFyIHNjb3BlID1cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgc2VsZjogbnVsbCxcclxuICAgICAgICAgICAgICAgIG1peGluczogW11cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKCBlbnZpcm9ubWVudC5JRTggKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5zZWxmID0gZ2V0UGxhaW5ET01PYmplY3QoKTtcclxuICAgICAgICAgICAgICAgIGFwcGx5UHJvdG90eXBlTWVtYmVycyggU2NvcGUsIHNjb3BlLnNlbGYgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBzY29wZS5zZWxmID0gbmV3IFNjb3BlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzY29wZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCBpbml0cy5oYXMoIGluaXRzLlBVQiApICYmIHJ1biApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgcHViO1xyXG4gICAgICAgICAgICBydW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKCBlbnZpcm9ubWVudC5JRTggKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwdWIgPSBnZXRQbGFpbkRPTU9iamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgYXBwbHlQcm90b3R5cGVNZW1iZXJzKCBUeXBlLCBwdWIgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBwdWIgPSBuZXcgVHlwZSgpO1xyXG4gICAgICAgICAgICBidWlsZCggVHlwZSwgcHViLCBhcmd1bWVudHMsIHRydWUgKTtcclxuICAgICAgICAgICAgcnVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHB1YjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFR5cGUubWVtYmVycyA9IHt9O1xyXG4gICAgVHlwZS5wYXJlbnQgPSBudWxsO1xyXG4gICAgVHlwZS5taXhpbnMgPSBbXTtcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gU2V0cyB0aGUgYmFzZSB0eXBlLlxyXG4gICAgICogQHBhcmFtIHtUeXBlfGZ1bmN0aW9ufSBCYXNlXHJcbiAgICAgKiBAcmV0dXJuIHtUeXBlfVxyXG4gICAgICovXHJcbiAgICBUeXBlLmV4dGVuZCA9IGZ1bmN0aW9uKCBCYXNlIClcclxuICAgIHtcclxuICAgICAgICAvLyBTaW5jZSBuYW1lIGNvbGxpc2lvbiBkZXRlY3Rpb24gaGFwcGVucyB3aGVuIHRoZSB0eXBlIGlzIGRlZmluZWQsIHdlIG11c3QgcHJldmVudCBwZW9wbGVcclxuICAgICAgICAvLyBmcm9tIGNoYW5naW5nIHRoZSBpbmhlcml0YW5jZSBoaWVyYXJjaHkgYWZ0ZXIgZGVmaW5pbmcgbWVtYmVycy5cclxuICAgICAgICBpZiAoIHV0aWwua2V5cyggVHlwZS5tZW1iZXJzICkubGVuZ3RoID4gMCApXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMuRGVmaW5pdGlvbkVycm9yKCBcIkNhbm5vdCBjaGFuZ2UgdGhlIGJhc2UgdHlwZSBhZnRlciBtZW1iZXJzIGhhdmUgYmVlbiBkZWZpbmVkLlwiICk7XHJcblxyXG4gICAgICAgIGlmICggIXV0aWwuaXNGdW5jKCBCYXNlICkgKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCBcIkJhc2UgdHlwZSBtdXN0IGJlIGEgZnVuY3Rpb24uXCIgKTtcclxuXHJcbiAgICAgICAgLy8gT25seSBzZXQgdGhlIHBhcmVudCBtZW1iZXIgaWYgdGhlIGJhc2UgdHlwZSB3YXMgY3JlYXRlZCBieSB1cy5cclxuICAgICAgICBpZiAoIGlzVHlwZU91cnMoIEJhc2UgKSApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlLlxyXG4gICAgICAgICAgICB2YXIgdCA9IEJhc2U7XHJcbiAgICAgICAgICAgIHdoaWxlICggdCApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmICggdCA9PT0gVHlwZSApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5EZWZpbml0aW9uRXJyb3IoIFwiQ2Fubm90IGluaGVyaXQgZnJvbSBcIiArICggQmFzZSA9PT0gVHlwZSA/IFwic2VsZlwiIDogXCJkZXJpdmVkIHR5cGVcIiApICsgXCIuXCIgKTtcclxuICAgICAgICAgICAgICAgIHQgPSB0LnBhcmVudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgVHlwZS5wYXJlbnQgPSBCYXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5pdHMub2ZmKCBpbml0cy5QVUIgKTtcclxuICAgICAgICBUeXBlLnByb3RvdHlwZSA9IG5ldyBCYXNlKCk7XHJcbiAgICAgICAgaW5pdHMub24oIGluaXRzLlBVQiApO1xyXG5cclxuICAgICAgICByZXR1cm4gVHlwZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIERlZmluZXMgbWVtYmVycyBvbiB0aGUgdHlwZS5cclxuICAgICAqXHJcbiAgICAgKiBFeGFtcGxlOiBUaGUgZm9sbG93aW5nIGRlZmluZXMgYSBwdWJsaWMgbWV0aG9kIGBmb29gLCBhIHByaXZhdGUgbWV0aG9kIGBiYXJgLCBhbmQgYSBwdWJsaWNcclxuICAgICAqIHZpcnR1YWwgbWV0aG9kIGBiYXpgIG9uIHRoZSB0eXBlIGBNeVR5cGVgLlxyXG4gICAgICpcclxuICAgICAgICA8cHJlPlxyXG4gICAgICAgICAgdmFyIE15VHlwZSA9IHR5cGUoKS5kZWYoe1xyXG4gICAgICAgICAgICBmb286IGZ1bmN0aW9uKCkgeyB9LFxyXG4gICAgICAgICAgICBfX2JhcjogZnVuY3Rpb24oKSB7IH0sXHJcbiAgICAgICAgICAgICRiYXo6IGZ1bmN0aW9uKCkgeyB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICA8L3ByZT5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2hhc2h9IG1lbWJlcnNcclxuICAgICAqIEByZXR1cm4ge1R5cGV9XHJcbiAgICAgKi9cclxuICAgIFR5cGUuZGVmID0gZnVuY3Rpb24oIG1lbWJlcnMgKVxyXG4gICAge1xyXG4gICAgICAgIHV0aWwuZWFjaCggbWVtYmVycywgZnVuY3Rpb24oIG1lbWJlciwgbmFtZSApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgaW5mbyA9IHBhcnNlTWVtYmVyKCBuYW1lICk7XHJcbiAgICAgICAgICAgIG5hbWUgPSBpbmZvLm5hbWU7XHJcblxyXG4gICAgICAgICAgICB2YWxpZGF0ZU1lbWJlciggVHlwZSwgaW5mbyApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBuYW1lID09PSBzcGVjaWFsLkNUT1IgKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIHV0aWwuaXNBcnJheSggbWVtYmVyICkgKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFR5cGUuJGluamVjdCA9IG1lbWJlcjtcclxuICAgICAgICAgICAgICAgICAgICBtZW1iZXIgPSBtZW1iZXIucG9wKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoICF1dGlsLmlzRnVuYyggbWVtYmVyICkgKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIFwiQ29uc3RydWN0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLlwiICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFR5cGUubWVtYmVyc1sgbmFtZSBdID1cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYWNjZXNzOiBpbmZvLmFjY2VzcyxcclxuICAgICAgICAgICAgICAgIGlzVmlydHVhbDogaW5mby5pc1ZpcnR1YWxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmICggdXRpbC5pc0Z1bmMoIG1lbWJlciApIClcclxuICAgICAgICAgICAgICAgIGRlZmluZU1ldGhvZCggVHlwZSwgbmFtZSwgbWVtYmVyICk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KCBUeXBlLCBpbmZvLCBtZW1iZXIgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggbmFtZSA9PT0gc3BlY2lhbC5DVE9SIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICFUeXBlLm1lbWJlcnMuY3Rvci5jYWxsc3VwZXIgJiZcclxuICAgICAgICAgICAgICAgICAgICBUeXBlLnBhcmVudCAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFR5cGUucGFyZW50Lm1lbWJlcnMuY3RvciAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFR5cGUucGFyZW50Lm1lbWJlcnMuY3Rvci5wYXJhbXMubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMuRGVmaW5pdGlvbkVycm9yKCBcIkNvbnN0cnVjdG9yIG11c3QgY2FsbCB0aGUgYmFzZSBjb25zdHJ1Y3RvciBleHBsaWNpdGx5IGJlY2F1c2UgaXQgY29udGFpbnMgcGFyYW1ldGVycy5cIiApO1xyXG4gICAgICAgICAgICAgICAgY3RvckRlZmluZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBUeXBlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBEZWZpbmVzIGV2ZW50cyBvbiB0aGUgdHlwZS5cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGV2ZW50c1xyXG4gICAgICogQHJldHVybiB7VHlwZX1cclxuICAgICAqL1xyXG4gICAgVHlwZS5ldmVudHMgPSBmdW5jdGlvbiggZXZlbnRzIClcclxuICAgIHtcclxuICAgICAgICB1dGlsLmVhY2goIGV2ZW50cywgZnVuY3Rpb24oIG5hbWUgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGluZm8gPSBwYXJzZU1lbWJlciggbmFtZSApO1xyXG4gICAgICAgICAgICBuYW1lID0gaW5mby5uYW1lO1xyXG5cclxuICAgICAgICAgICAgdmFsaWRhdGVNZW1iZXIoIFR5cGUsIGluZm8gKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggbmFtZSA9PT0gc3BlY2lhbC5DVE9SIClcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMuRGVmaW5pdGlvbkVycm9yKCBcIkV2ZW50IGNhbm5vdCBiZSBuYW1lZCAnY3RvcicuXCIgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggaW5mby5pc1ZpcnR1YWwgKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5EZWZpbml0aW9uRXJyb3IoIFwiRXZlbnRzIGNhbm5vdCBiZSB2aXJ0dWFsLlwiICk7XHJcblxyXG4gICAgICAgICAgICBUeXBlLm1lbWJlcnNbIG5hbWUgXSA9IHtcclxuICAgICAgICAgICAgICAgIGFjY2VzczogaW5mby5hY2Nlc3MsXHJcbiAgICAgICAgICAgICAgICBpc0V2ZW50OiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIFR5cGU7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9ucyBNaXhlcyBvdGhlciB0eXBlcyBpbiB3aXRoIHRoZSB0eXBlLlxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHlwZXNcclxuICAgICAqIEByZXR1cm4ge1R5cGV9XHJcbiAgICAgKi9cclxuICAgIFR5cGUuaW5jbHVkZSA9IGZ1bmN0aW9uKCB0eXBlcyApXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKCBjdG9yRGVmaW5lZCApXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMuRGVmaW5pdGlvbkVycm9yKCBcIk1peGlucyBtdXN0IGJlIGRlZmluZWQgYmVmb3JlIHRoZSBjb25zdHJ1Y3Rvci5cIiApO1xyXG5cclxuICAgICAgICB1dGlsLmVhY2goIHR5cGVzLCBmdW5jdGlvbiggbWl4aW4gKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKCAhaXNUeXBlT3VycyggbWl4aW4gKSApXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCBcIk1peGluIG11c3QgYmUgYSB0eXBlLlwiICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIG1peGluID09PSBUeXBlIClcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMuRGVmaW5pdGlvbkVycm9yKCBcIkNhbm5vdCBpbmNsdWRlIHNlbGYuXCIgKTtcclxuXHJcbiAgICAgICAgICAgIGNoZWNrTWl4aW5Gb3JDaXJjdWxhclJlZmVyZW5jZSggVHlwZSwgbWl4aW4gKTtcclxuICAgICAgICAgICAgVHlwZS5taXhpbnMucHVzaCggbWl4aW4gKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gVHlwZTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIFR5cGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAZGVzY3JpcHRpb24gQ2hlY2tzIG1peGluIGZvciBjaXJjdWxhciByZWZlcmVuY2VzLlxyXG4gKiBAcGFyYW0ge1R5cGV9IHR5cGVcclxuICogQHBhcmFtIHtUeXBlfSBtaXhpblxyXG4gKi9cclxuZnVuY3Rpb24gY2hlY2tNaXhpbkZvckNpcmN1bGFyUmVmZXJlbmNlKCB0eXBlLCBtaXhpbiApXHJcbntcclxuICAgIGlmICggdHlwZSA9PT0gbWl4aW4gKVxyXG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuRGVmaW5pdGlvbkVycm9yKCBcIkNhbm5vdCBpbmNsdWRlIHR5cGUgdGhhdCBpbmNsdWRlcyBzZWxmLlwiICk7XHJcbiAgICB1dGlsLmVhY2goIG1peGluLm1peGlucywgZnVuY3Rpb24oIG0gKSB7XHJcbiAgICAgICAgY2hlY2tNaXhpbkZvckNpcmN1bGFyUmVmZXJlbmNlKCB0eXBlLCBtICk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHR5cGUgd2FzIGNyZWF0ZWQgYnkgdXMuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gdHlwZVxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNUeXBlT3VycyggdHlwZSApXHJcbntcclxuICAgIGluaXRzLm9uKCBpbml0cy5UWVBFX0NIRUNLICk7XHJcbiAgICB0eXBlQ2hlY2tSZXN1bHQgPSBmYWxzZTtcclxuICAgIHR5cGUoKTtcclxuICAgIGluaXRzLm9mZiggaW5pdHMuVFlQRV9DSEVDSyApO1xyXG4gICAgcmV0dXJuIHR5cGVDaGVja1Jlc3VsdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBDcmVhdGVzIGEgbmV3IHByaXZhdGUgc2NvcGUgdHlwZS5cclxuICogQHBhcmFtIHtUeXBlfSBUeXBlXHJcbiAqIEByZXR1cm4ge1Njb3BlfVxyXG4gKi9cclxuZnVuY3Rpb24gZGVmaW5lU2NvcGUoIFR5cGUgKVxyXG57XHJcbiAgICB2YXIgU2NvcGUgPSBmdW5jdGlvbigpIHt9O1xyXG4gICAgaW5pdHMub2ZmKCBpbml0cy5QVUIgfCBpbml0cy5TQ09QRSApO1xyXG4gICAgU2NvcGUucHJvdG90eXBlID0gbmV3IFR5cGUoKTtcclxuICAgIGluaXRzLm9uKCBpbml0cy5QVUIgfCBpbml0cy5TQ09QRSApO1xyXG5cclxuICAgIHZhciBmbiA9IFNjb3BlLnByb3RvdHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIHByaXZhdGUgc2NvcGUgb2YgdGhlIHR5cGUgaW5zdGFuY2UuXHJcbiAgICAgKi9cclxuICAgIGZuLl9wcnkgPSBmdW5jdGlvbiggcHViIClcclxuICAgIHtcclxuICAgICAgICB0dW5uZWwub3BlbiggVHlwZSApO1xyXG4gICAgICAgIHZhciBzY29wZSA9ICEhcHViICYmICEhcHViLiRzY29wZSAmJiB1dGlsLmlzRnVuYyggcHViLiRzY29wZSApID8gcHViLiRzY29wZSgpIDogbnVsbDtcclxuICAgICAgICB0dW5uZWwuY2xvc2UoKTtcclxuICAgICAgICByZXR1cm4gc2NvcGUgfHwgcHViO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gU2NvcGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb24gR2V0cyB0aGUgbWVtYmVyIGluZm8gYnkgcGFyc2luZyB0aGUgbWVtYmVyIG5hbWUuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICovXHJcbmZ1bmN0aW9uIHBhcnNlTWVtYmVyKCBuYW1lIClcclxueyAgICAgICAgXHJcbiAgICB2YXIgdHdvTGV0dGVyID0gbmFtZS5zdWJzdHIoIDAsIDIgKTtcclxuXHJcbiAgICAvLyBkZXRlcm1pbmVzIHRoZSBtZW1iZXIncyB2aXNpYmlsaXR5IChwdWJsaWN8cHJpdmF0ZSlcclxuICAgIHZhciBtb2RpZmllciA9IEdFVF9BQ0NFU1NbIHR3b0xldHRlciBdIHx8IEdFVF9BQ0NFU1NbIG5hbWVbMF0gXSB8fCBhY2Nlc3MuUFVCTElDO1xyXG5cclxuICAgIC8vIGRldGVybWluZXMgd2hldGhlciB0aGUgbWV0aG9kIGNhbiBiZSBvdmVycmlkZGVuXHJcbiAgICB2YXIgaXNWaXJ0dWFsID0gSVNfVklSVFVBTFsgdHdvTGV0dGVyIF0gfHwgSVNfVklSVFVBTFsgbmFtZVswXSBdIHx8IGZhbHNlO1xyXG5cclxuICAgIC8vIHRyaW0gYXdheSB0aGUgbW9kaWZpZXJzXHJcbiAgICBuYW1lID0gbmFtZS5zdWJzdHIoIEdFVF9QUkVGSVhbIHR3b0xldHRlciBdIHx8IEdFVF9QUkVGSVhbIG5hbWVbMF0gXSB8fCAwICk7XHJcblxyXG4gICAgLy8gXCJjdG9yXCIgaXMgYSBzcGVjaWFsIG5hbWUgZm9yIHRoZSBjb25zdHJ1Y3RvciBtZXRob2RcclxuICAgIGlmICggbmFtZSA9PT0gc3BlY2lhbC5DVE9SIClcclxuICAgIHtcclxuICAgICAgICBtb2RpZmllciA9IGFjY2Vzcy5QUklWQVRFO1xyXG4gICAgICAgIGlzVmlydHVhbCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYWNjZXNzOiBtb2RpZmllcixcclxuICAgICAgICBpc1ZpcnR1YWw6IGlzVmlydHVhbCxcclxuICAgICAgICBuYW1lOiBuYW1lXHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uIENoZWNrcyB0aGUgbWVtZWJlciBpbmZvIG9uIGEgdHlwZSBhbmQgdGhyb3dzIGFuIGVycm9yIGlmIGludmFsaWQuXHJcbiAqIEBwYXJhbSB7VHlwZX0gdHlwZVxyXG4gKiBAcGFyYW0ge09iamVjdH0gaW5mb1xyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVNZW1iZXIoIHR5cGUsIGluZm8gKVxyXG57XHJcbiAgICAvLyBjaGVjayBmb3IgbmFtZSBjb2xsaXNpb25cclxuICAgIGlmICggaXNNZW1iZXJEZWZpbmVkKCB0eXBlLCBpbmZvLm5hbWUgKSApXHJcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5EZWZpbml0aW9uRXJyb3IoIFwiTWVtYmVyICdcIiArIGluZm8ubmFtZSArIFwiJyBpcyBhbHJlYWR5IGRlZmluZWQuXCIgKTtcclxuXHJcbiAgICAvLyBtYWtlIHN1cmUgdGhlIGFjY2VzcyBtb2RpZmllciBpc24ndCBiZWluZyBjaGFuZ2VkXHJcbiAgICBpZiAoXHJcbiAgICAgICAgaW5mby5hY2Nlc3MgIT09IGFjY2Vzcy5QUklWQVRFICYmXHJcbiAgICAgICAgdHlwZS5wYXJlbnQgIT09IG51bGwgJiZcclxuICAgICAgICB0eXBlLnBhcmVudC5tZW1iZXJzWyBpbmZvLm5hbWUgXSAmJlxyXG4gICAgICAgIHR5cGUucGFyZW50Lm1lbWJlcnNbIGluZm8ubmFtZSBdLmFjY2VzcyAhPT0gaW5mby5hY2Nlc3NcclxuICAgIClcclxuICAgIHtcclxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkRlZmluaXRpb25FcnJvciggXCJDYW5ub3QgY2hhbmdlIGFjY2VzcyBtb2RpZmllciBvZiBtZW1iZXIgJ1wiICsgbmFtZSArIFwiJyBmcm9tIFwiICtcclxuICAgICAgICAgICAgdHlwZS5wYXJlbnQubWVtYmVyc1sgaW5mby5uYW1lIF0uYWNjZXNzICsgXCIgdG8gXCIgKyBpbmZvLmFjY2VzcyArIFwiLlwiICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAZGVzY3JpcHRpb24gQ2hlY2tzIGlmIG1lbWJlciBuYW1lIGNvbGxpZGVzIHdpdGggYW5vdGhlciBtZW1iZXIuXHJcbiAqIEBwYXJhbSB7VHlwZX0gdHlwZSBUaGUgdHlwZSB0byBjaGVjay5cclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG1lbWJlciBuYW1lLlxyXG4gKiBAcGFyYW0ge2Jvb2x9IFtwYXJlbnRdIFRydWUgaWYgdGhlIHR5cGUgYmVpbmcgY2hlY2tlZCBpcyBhIGJhc2UgdHlwZS5cclxuICogQHJldHVybiB7Ym9vbH1cclxuICovXHJcbmZ1bmN0aW9uIGlzTWVtYmVyRGVmaW5lZCggdHlwZSwgbmFtZSwgcGFyZW50IClcclxue1xyXG4gICAgaWYgKFxyXG4gICAgICAgIHR5cGUubWVtYmVyc1sgbmFtZSBdICYmXHJcbiAgICAgICAgKCAhcGFyZW50IHx8IHR5cGUubWVtYmVyc1sgbmFtZSBdLmFjY2VzcyAhPT0gYWNjZXNzLlBSSVZBVEUgKSAmJlxyXG4gICAgICAgICggIXBhcmVudCB8fCAhdHlwZS5tZW1iZXJzWyBuYW1lIF0uaXNWaXJ0dWFsIClcclxuICAgIClcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIGlmICggdHlwZS5wYXJlbnQgIT09IG51bGwgKVxyXG4gICAgICAgIHJldHVybiBpc01lbWJlckRlZmluZWQoIHR5cGUucGFyZW50LCBuYW1lLCB0cnVlICk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAZGVzY3JpcHRpb24gRGVmaW5lcyBhIG1ldGhvZCBvbiB0aGUgdHlwZS5cclxuICogQHBhcmFtIHtUeXBlfSB0eXBlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gbWV0aG9kXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWZpbmVNZXRob2QoIHR5cGUsIG5hbWUsIG1ldGhvZCApXHJcbntcclxuICAgIHZhciBwYXJhbXMgPSBbXTtcclxuICAgIHZhciBtYXRjaCA9IG1ldGhvZC50b1N0cmluZygpLm1hdGNoKCAvXmZ1bmN0aW9uXFxzKlxcKChbXigpKV0rKVxcKS8gKTtcclxuICAgIGlmICggbWF0Y2ggIT09IG51bGwgKVxyXG4gICAge1xyXG4gICAgICAgIHV0aWwuZWFjaCggbWF0Y2hbMV0uc3BsaXQoIFwiLFwiICksIGZ1bmN0aW9uKCBwYXJhbSwgaW5kZXggKSB7XHJcbiAgICAgICAgICAgIHBhcmFtcy5wdXNoKCB1dGlsLnRyaW0oIHBhcmFtICkgKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHR5cGUubWVtYmVyc1sgbmFtZSBdLm1ldGhvZCA9IG1ldGhvZDtcclxuICAgIHR5cGUubWVtYmVyc1sgbmFtZSBdLnBhcmFtcyA9IHBhcmFtcztcclxuICAgIHR5cGUubWVtYmVyc1sgbmFtZSBdLmNhbGxzdXBlciA9IGZuVGVzdC50ZXN0KCBtZXRob2QgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBEZWZpbmVzIGEgcHJvcGVydHkgb24gdGhlIHR5cGUuXHJcbiAqIEBwYXJhbSB7VHlwZX0gVHlwZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydHlcclxuICovXHJcbmZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KCBUeXBlLCBpbmZvLCBwcm9wZXJ0eSApXHJcbntcclxuICAgIGlmICggdXRpbC50eXBlT2YoIHByb3BlcnR5ICkgIT09IFwib2JqZWN0XCIgKVxyXG4gICAgICAgIHByb3BlcnR5ID0geyB2YWx1ZTogcHJvcGVydHkgfTtcclxuXHJcbiAgICB2YXIgZGlmZmVyZW50ID0gMDtcclxuXHJcbiAgICAvLyBJRTggd2lsbCBhY3R1YWxseSBlbnVtZXJhdGUgb3ZlciBtZW1iZXJzIGFkZGVkIGR1cmluZyBhbiBlbnVtZXJhdGlvbixcclxuICAgIC8vIHNvIHdlIG5lZWQgdG8gd3JpdGUgdG8gYSB0ZW1wIG9iamVjdCBhbmQgY29weSB0aGUgYWNjZXNzb3JzIG92ZXIgb25jZVxyXG4gICAgLy8gd2UncmUgZG9uZS5cclxuICAgIHZhciB0ZW1wID0ge307XHJcbiAgICB1dGlsLmVhY2goIHByb3BlcnR5LCBmdW5jdGlvbiggbWV0aG9kLCB0eXBlIClcclxuICAgIHtcclxuICAgICAgICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHZhciB0d29MZXR0ZXIgPSB0eXBlLnN1YnN0ciggMCwgMiApO1xyXG4gICAgICAgIGlmICggSVNfVklSVFVBTFsgdHdvTGV0dGVyIF0gfHwgSVNfVklSVFVBTFsgdHlwZVswXSBdIClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5EZWZpbml0aW9uRXJyb3IoIFwiUHJvcGVydHkgJ1wiICsgaW5mby5uYW1lICsgXCInIGNhbm5vdCBoYXZlIHZpcnR1YWwgYWNjZXNzb3JzLlwiICk7XHJcblxyXG4gICAgICAgIHZhciBhY2Nlc3MgPSBHRVRfQUNDRVNTWyB0d29MZXR0ZXIgXSB8fCBHRVRfQUNDRVNTWyB0eXBlWzBdIF0gfHwgaW5mby5hY2Nlc3M7XHJcbiAgICAgICAgaWYgKCBBQ0NFU1NbIGFjY2VzcyBdIDwgQUNDRVNTWyBpbmZvLmFjY2VzcyBdIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMuRGVmaW5pdGlvbkVycm9yKCBcIlRoZSBcIiArIHR5cGUgKyBcIiBhY2Nlc3NvciBvZiB0aGUgcHJvcGVydHkgJ1wiICsgaW5mby5uYW1lICtcclxuICAgICAgICAgICAgICAgIFwiJyBjYW5ub3QgaGF2ZSBhIGxvd2VyIGFjY2VzcyBtb2RpZmllciB0aGFuIHRoZSBwcm9wZXJ0eSBpdHNlbGYuXCIgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHR5cGUgPSB0eXBlLnN1YnN0ciggR0VUX1BSRUZJWFsgdHdvTGV0dGVyIF0gfHwgR0VUX1BSRUZJWFsgdHlwZVswXSBdIHx8IDAgKTtcclxuXHJcbiAgICAgICAgaWYgKCB0eXBlICE9PSBcImdldFwiICYmIHR5cGUgIT09IFwic2V0XCIgKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIGlmICggYWNjZXNzICE9PSBpbmZvLmFjY2VzcyApXHJcbiAgICAgICAgICAgIGRpZmZlcmVudCsrO1xyXG5cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIFR5cGUucGFyZW50ICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIFR5cGUucGFyZW50Lm1lbWJlcnNbIGluZm8ubmFtZSBdICYmXHJcbiAgICAgICAgICAgIFR5cGUucGFyZW50Lm1lbWJlcnNbIGluZm8ubmFtZSBdWyB0eXBlIF0gJiZcclxuICAgICAgICAgICAgVHlwZS5wYXJlbnQubWVtYmVyc1sgaW5mby5uYW1lIF1bIHR5cGUgXS5hY2Nlc3MgIT09IGFjY2Vzc1xyXG4gICAgICAgIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMuRGVmaW5pdGlvbkVycm9yKCBcIkNhbm5vdCBjaGFuZ2UgYWNjZXNzIG1vZGlmaWVyIG9mICdcIiArIHR5cGUgKyBcIicgYWNjZXNzb3IgZm9yIHByb3BlcnR5ICdcIiArIGluZm8ubmFtZSArXHJcbiAgICAgICAgICAgICAgICBcIicgZnJvbSBcIiArIFR5cGUucGFyZW50Lm1lbWJlcnNbIGluZm8ubmFtZSBdWyB0eXBlIF0uYWNjZXNzICsgXCIgdG8gXCIgKyBhY2Nlc3MgKyBcIi5cIiApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCBtZXRob2QgIT09IG51bGwgJiYgIXV0aWwuaXNGdW5jKCBtZXRob2QgKSApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCB0eXBlLnN1YnN0ciggMCwgMSApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnN1YnN0ciggMSApICsgXCIgYWNjZXNzb3IgZm9yIHByb3BlcnR5ICdcIiArXHJcbiAgICAgICAgICAgICAgICBpbmZvLm5hbWUgKyBcIicgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIG51bGwgKHVzZXMgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbi4pXCIgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGVtcFsgdHlwZSBdID1cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGFjY2VzczogYWNjZXNzLFxyXG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZFxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuICAgIHByb3BlcnR5LmdldCA9IHRlbXAuZ2V0O1xyXG4gICAgcHJvcGVydHkuc2V0ID0gdGVtcC5zZXQ7XHJcblxyXG4gICAgaWYgKCBkaWZmZXJlbnQgPT09IDIgKVxyXG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuRGVmaW5pdGlvbkVycm9yKCBcIkNhbm5vdCBzZXQgYWNjZXNzIG1vZGlmZXJzIGZvciBib3RoIGFjY2Vzc29ycyBvZiB0aGUgcHJvcGVydHkgJ1wiICsgaW5mby5uYW1lICsgXCInLlwiICk7XHJcblxyXG4gICAgaWYgKCAhcHJvcGVydHkuZ2V0ICYmICFwcm9wZXJ0eS5zZXQgKVxyXG4gICAge1xyXG4gICAgICAgIHByb3BlcnR5LmdldCA9IHsgYWNjZXNzOiBpbmZvLmFjY2VzcyB9O1xyXG4gICAgICAgIHByb3BlcnR5LnNldCA9IHsgYWNjZXNzOiBpbmZvLmFjY2VzcyB9O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggcHJvcGVydHkuZ2V0ICYmICF1dGlsLmlzRnVuYyggcHJvcGVydHkuZ2V0Lm1ldGhvZCApIClcclxuICAgIHtcclxuICAgICAgICBwcm9wZXJ0eS5nZXQubWV0aG9kID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoIHByb3BlcnR5LnNldCAmJiAhdXRpbC5pc0Z1bmMoIHByb3BlcnR5LnNldC5tZXRob2QgKSApXHJcbiAgICB7XHJcbiAgICAgICAgcHJvcGVydHkuc2V0Lm1ldGhvZCA9IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUoIHZhbHVlICk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB1dGlsLmVhY2goWyBwcm9wZXJ0eS5nZXQsIHByb3BlcnR5LnNldCBdLCBmdW5jdGlvbiggYWNjZXNzb3IsIGluZGV4IClcclxuICAgIHtcclxuICAgICAgICBpZiAoICFhY2Nlc3NvciApIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIHR5cGUgPSBpbmRleCA9PT0gMCA/IFwiZ2V0XCIgOiBcInNldFwiO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgVHlwZS5wYXJlbnQgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgVHlwZS5wYXJlbnQubWVtYmVyc1sgaW5mby5uYW1lIF0gJiZcclxuICAgICAgICAgICAgVHlwZS5wYXJlbnQubWVtYmVyc1sgaW5mby5uYW1lIF0uYWNjZXNzICE9PSBhY2Nlc3MuUFJJVkFURSAmJlxyXG4gICAgICAgICAgICBUeXBlLnBhcmVudC5tZW1iZXJzWyBpbmZvLm5hbWUgXVsgdHlwZSBdID09PSB1bmRlZmluZWRcclxuICAgICAgICApXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMuRGVmaW5pdGlvbkVycm9yKCBcIkNhbm5vdCBjaGFuZ2UgcmVhZC93cml0ZSBkZWZpbml0aW9uIG9mIHByb3BlcnR5ICdcIiArIGluZm8ubmFtZSArIFwiJy5cIiApO1xyXG5cclxuICAgICAgICBUeXBlLm1lbWJlcnNbIGluZm8ubmFtZSBdWyB0eXBlIF0gPVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYWNjZXNzOiBhY2Nlc3Nvci5hY2Nlc3MsXHJcbiAgICAgICAgICAgIG1ldGhvZDogYWNjZXNzb3IubWV0aG9kLFxyXG4gICAgICAgICAgICBjYWxsc3VwZXI6IGZuVGVzdC50ZXN0KCBhY2Nlc3Nvci5tZXRob2QgKVxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbiAgICBUeXBlLm1lbWJlcnNbIGluZm8ubmFtZSBdLnZhbHVlID0gcHJvcGVydHkudmFsdWUgPyBwcm9wZXJ0eS52YWx1ZSA6IG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge1R5cGV9IHR5cGVcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKi9cclxuZnVuY3Rpb24gYXBwbHlQcm90b3R5cGVNZW1iZXJzKCB0eXBlLCBvYmogKVxyXG57XHJcbiAgICB2YXIgcHJvdG8gPSB0eXBlLnByb3RvdHlwZTtcclxuICAgIGlmICggcHJvdG8uY29uc3RydWN0b3IucHJvdG90eXBlICE9PSBwcm90byApXHJcbiAgICAgICAgYXBwbHlQcm90b3R5cGVNZW1iZXJzKCBwcm90by5jb25zdHJ1Y3Rvciwgb2JqICk7XHJcbiAgICBmb3IgKCB2YXIgcHJvcCBpbiBwcm90byApXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKCB1dGlsLmhhc093biggcHJvdG8sIHByb3AgKSApXHJcbiAgICAgICAgICAgIG9ialsgcHJvcCBdID0gcHJvdG9bIHByb3AgXTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UGxhaW5ET01PYmplY3QoKVxyXG57XHJcbiAgICBmdW5jdGlvbiBvdmVyd3JpdGUoIG9iaiwgcHJvcCApXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIF92YWx1ZTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoIG9iaiwgcHJvcCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG4gICAgICAgICAgICAgICAgX3ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHZhciBvYmogPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCksIHByb3A7XHJcbiAgICBmb3IgKCBwcm9wIGluIG9iaiApXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKCB1dGlsLmhhc093biggb2JqLCBwcm9wICkgKVxyXG4gICAgICAgICAgICBvdmVyd3JpdGUoIG9iaiwgcHJvcCApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9iajtcclxufVxyXG4iLCIvLyBJRTggb25seSBzdXBwb3J0cyBPYmplY3QuZGVmaW5lUHJvcGVydHkgb24gRE9NIG9iamVjdHMuXHJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9kZDU0ODY4NyhWUy44NSkuYXNweFxyXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80ODY3NzU1Lzc0MDk5NlxyXG52YXIgSUU4ID0gZmFsc2U7XHJcbnRyeSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoIHt9LCBcInhcIiwge30gKTtcclxufSBjYXRjaCAoIGUgKSB7XHJcbiAgICBJRTggPSB0cnVlO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIElFODogSUU4LFxyXG4gICAgd2luZG93OiB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDoge31cclxufTtcclxuIiwidmFyIERlZmluaXRpb25FcnJvciA9IGZ1bmN0aW9uKCBtZXNzYWdlICkge1xyXG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxufTtcclxuRGVmaW5pdGlvbkVycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xyXG5EZWZpbml0aW9uRXJyb3IucHJvdG90eXBlLm5hbWUgPSBcInR5cGUuRGVmaW5pdGlvbkVycm9yXCI7XHJcblxyXG52YXIgSW5pdGlhbGl6YXRpb25FcnJvciA9IGZ1bmN0aW9uKCBtZXNzYWdlICkge1xyXG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxufTtcclxuSW5pdGlhbGl6YXRpb25FcnJvci5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcclxuSW5pdGlhbGl6YXRpb25FcnJvci5wcm90b3R5cGUubmFtZSA9IFwidHlwZS5Jbml0aWFsaXphdGlvbkVycm9yXCI7XHJcblxyXG52YXIgQWNjZXNzVmlvbGF0aW9uRXJyb3IgPSBmdW5jdGlvbiggbWVzc2FnZSApIHtcclxuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbn07XHJcbkFjY2Vzc1Zpb2xhdGlvbkVycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xyXG5BY2Nlc3NWaW9sYXRpb25FcnJvci5wcm90b3R5cGUubmFtZSA9IFwidHlwZS5BY2Nlc3NWaW9sYXRpb25FcnJvclwiO1xyXG5cclxudmFyIEludmFsaWRPcGVyYXRpb25FcnJvciA9IGZ1bmN0aW9uKCBtZXNzYWdlICkge1xyXG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxufTtcclxuSW52YWxpZE9wZXJhdGlvbkVycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xyXG5JbnZhbGlkT3BlcmF0aW9uRXJyb3IucHJvdG90eXBlLm5hbWUgPSBcInR5cGUuSW52YWxpZE9wZXJhdGlvbkVycm9yXCI7XHJcblxyXG52YXIgQXJndW1lbnRFcnJvciA9IGZ1bmN0aW9uKCBtZXNzYWdlICkge1xyXG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxufTtcclxuQXJndW1lbnRFcnJvci5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcclxuQXJndW1lbnRFcnJvci5wcm90b3R5cGUubmFtZSA9IFwidHlwZS5Bcmd1bWVudEVycm9yXCI7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9XHJcbntcclxuICAgIERlZmluaXRpb25FcnJvcjogRGVmaW5pdGlvbkVycm9yLFxyXG4gICAgSW5pdGlhbGl6YXRpb25FcnJvcjogSW5pdGlhbGl6YXRpb25FcnJvcixcclxuICAgIEFjY2Vzc1Zpb2xhdGlvbkVycm9yOiBBY2Nlc3NWaW9sYXRpb25FcnJvcixcclxuICAgIEludmFsaWRPcGVyYXRpb25FcnJvcjogSW52YWxpZE9wZXJhdGlvbkVycm9yLFxyXG4gICAgQXJndW1lbnRFcnJvcjogQXJndW1lbnRFcnJvclxyXG59O1xyXG4iLCIvLyBBIGdsb2JhbCBmbGFnIHRvIGNvbnRyb2wgZXhlY3V0aW9uIG9mIHR5cGUgaW5pdGlhbGl6ZXJzLlxyXG52YXIgUFVCID0gMTtcclxudmFyIFNDT1BFID0gMjtcclxudmFyIFRZUEVfQ0hFQ0sgPSA0O1xyXG52YXIgaW5pdHMgPSBQVUI7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9XHJcbntcclxuICAgIFBVQjogUFVCLFxyXG4gICAgU0NPUEU6IFNDT1BFLFxyXG4gICAgVFlQRV9DSEVDSzogVFlQRV9DSEVDSyxcclxuICAgIG9uOiBmdW5jdGlvbiggZmxhZyApIHtcclxuICAgICAgICBpbml0cyB8PSBmbGFnO1xyXG4gICAgfSxcclxuICAgIG9mZjogZnVuY3Rpb24oIGZsYWcgKSB7XHJcbiAgICAgICAgaW5pdHMgJj0gfmZsYWc7XHJcbiAgICB9LFxyXG4gICAgaGFzOiBmdW5jdGlvbiggZmxhZyApIHtcclxuICAgICAgICByZXR1cm4gKCBpbml0cyAmIGZsYWcgKSA9PT0gZmxhZztcclxuICAgIH1cclxufTtcclxuIiwidmFyIGVudmlyb25tZW50ID0gcmVxdWlyZSggXCIuL2Vudmlyb25tZW50XCIgKTtcclxudmFyIGVycm9ycyA9IHJlcXVpcmUoIFwiLi9lcnJvcnNcIiApO1xyXG52YXIgdHlwZSA9IHJlcXVpcmUoIFwiLi9kZWZpbmVcIiApO1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoIFwiLi91dGlsXCIgKTtcclxuXHJcbnZhciBEZWZlcnJlZCA9IHJlcXVpcmUoIFwiLi9kZWZlcnJlZFwiICk7XHJcblxyXG52YXIgUFJPVklERVIgPSBcIlByb3ZpZGVyYFwiO1xyXG52YXIgTEFaWV9QUk9WSURFUiA9IFwiTGF6eVByb3ZpZGVyYFwiO1xyXG5cclxudmFyIEluamVjdG9yID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlKCkuZGVmKFxyXG57XHJcbiAgICBjdG9yOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IHt9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBSZWdpc3RlcnMgYSBzZXJ2aWNlLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VcclxuICAgICAqIEByZXR1cm4ge0JpbmRpbmdTZWxlY3Rvcn1cclxuICAgICAqL1xyXG4gICAgYmluZDogZnVuY3Rpb24oIHNlcnZpY2UgKVxyXG4gICAge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBpZiAoICFzZXJ2aWNlIHx8ICF1dGlsLmlzU3RyaW5nKCBzZXJ2aWNlICkgKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkFyZ3VtZW50RXJyb3IoIFwiQXJndW1lbnQgJ3NlcnZpY2UnIG11c3QgaGF2ZSBhIHZhbHVlLlwiICk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiBTcGVjaWZpZXMgd2hpY2ggcHJvdmlkZXIgdG8gYmluZCB0aGUgc2VydmljZSB0by5cclxuICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheXxmdW5jdGlvbigpfSBwcm92aWRlclxyXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHtCaW5kaW5nQ29uZmlndXJhdG9yfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdG86IGZ1bmN0aW9uKCBwcm92aWRlciApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBiaW5kaW5nID0gc2VsZi5yZWdpc3Rlciggc2VydmljZSwgcHJvdmlkZXIgKTtcclxuICAgICAgICAgICAgICAgIHZhciBjb25maWcgPVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAqIENhdXNlcyB0aGUgYmluZGluZyB0byByZXR1cm4gdGhlIHNhbWUgaW5zdGFuY2UgZm9yIGFsbCBpbnN0YW5jZXMgcmVzb2x2ZWQgdGhyb3VnaFxyXG4gICAgICAgICAgICAgICAgICAgICAqIHRoZSBpbmplY3Rvci5cclxuICAgICAgICAgICAgICAgICAgICAgKiBAcmV0dXJuIHtCaW5kaW5nQ29uZmlndXJhdG9yfVxyXG4gICAgICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGFzU2luZ2xldG9uOiBmdW5jdGlvbigpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3Jlc29sdmUgPSBiaW5kaW5nLnJlc29sdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNvbHZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5nLnJlc29sdmUgPSBmdW5jdGlvbigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIXJlc29sdmVkIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfcmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBhcmd1bWVudHMgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAqIEFkZHMgYSBjb25zdHJhaW50IHRvIHRoZSBiaW5kaW5nIHNvIHRoYXQgaXQgaXMgb25seSB1c2VkIHdoZW4gdGhlIGJvdW5kXHJcbiAgICAgICAgICAgICAgICAgICAgICogc2VydmljZSBpcyBpbmplY3RlZCBpbnRvIG9uZSBvZiB0aGUgc3BlY2lmaWVkIHNlcnZpY2VzLlxyXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybiB7QmluZGluZ0NvbmZpZ3VyYXRvcn1cclxuICAgICAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgICAgICB3aGVuRm9yOiBmdW5jdGlvbiggc2VydmljZXMgKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB1dGlsLmlzQXJyYXkoIHNlcnZpY2VzICkgJiYgc2VydmljZXMubGVuZ3RoIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRpbmcuZmlsdGVyID0gc2VydmljZXMuc2xpY2UoIDAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5Bcmd1bWVudEVycm9yKCBcIkV4cGVjdGVkICdzZXJ2aWNlcycgdG8gYmUgYW4gYXJyYXkgb2Ygc3RyaW5nLlwiICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBVbnJlZ2lzdGVycyBhIHNlcnZpY2UuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VydmljZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW2ZpbHRlcl1cclxuICAgICAqIEByZXR1cm4ge0luamVjdG9yfVxyXG4gICAgICovXHJcbiAgICB1bmJpbmQ6IGZ1bmN0aW9uKCBzZXJ2aWNlLCBmaWx0ZXIgKVxyXG4gICAge1xyXG4gICAgICAgIGZpbHRlciA9IGZpbHRlciB8fCBbXTtcclxuICAgICAgICB2YXIgYmluZGluZ3MgPSB0aGlzLmNvbnRhaW5lclsgc2VydmljZSBdIHx8IFtdO1xyXG4gICAgICAgIHZhciBmbGVuID0gZmlsdGVyLmxlbmd0aDtcclxuICAgICAgICBpZiAoIGZsZW4gKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGIgPSAwLCBibGVuID0gYmluZGluZ3MubGVuZ3RoLCBmLCBpO1xyXG4gICAgICAgICAgICBmb3IgKCA7IGIgPCBibGVuOyBiKysgKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIGJpbmRpbmdzWyBiIF0uZmlsdGVyIClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZWFjaCBzZXJ2aWNlIGluIHRoZSBmaWx0ZXIgcGFyYW1ldGVyIGZyb20gdGhlIGJpbmRpbmcncyBmaWx0ZXIgbGlzdC5cclxuICAgICAgICAgICAgICAgICAgICBmID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKCA7IGYgPCBmbGVuOyBmKysgKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWNjb3VudCBmb3Igc2xvcHB5IHByb2dyYW1taW5nIGFuZCByZW1vdmUgYWxsIG9jY3VyZW5jZXMgb2YgdGhlIHNlcnZpY2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB1dGlsLmluZGV4T2YoIGJpbmRpbmdzWyBiIF0uZmlsdGVyLCBmaWx0ZXJbIGYgXSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIGkgPiAtMSApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRpbmdzWyBiIF0uZmlsdGVyLnNwbGljZSggaSwgMSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHV0aWwuaW5kZXhPZiggYmluZGluZ3NbIGIgXS5maWx0ZXIsIGZpbHRlclsgZiBdICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoICFiaW5kaW5nc1sgYiBdLmZpbHRlci5sZW5ndGggKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBiaW5kaW5nIG5vdyBoYXMgYW4gZW1wdHkgZmlsdGVyIGxpc3QsIHJlbW92ZSBpdCBiZWNhdXNlIGl0IGlzIHVzZWxlc3MuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTm90ZTogTW92ZSB0aGUgY3Vyc29yIChiKSBiYWNrIG9uZSBzbG90IHNvIHRoYXQgd2UgZG9uJ3Qgc2tpcCB0aGUgbmV4dCBpdGVtLlxyXG4gICAgICAgICAgICAgICAgICAgIGJpbmRpbmdzLnNwbGljZSggYiwgMSApO1xyXG4gICAgICAgICAgICAgICAgICAgIGItLTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoICFiaW5kaW5ncy5sZW5ndGggKVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY29udGFpbmVyWyBzZXJ2aWNlIF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuY29udGFpbmVyWyBzZXJ2aWNlIF07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3B1YjtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gUmVzb2x2ZXMgYSB0YXJnZXQgYW5kIGl0cyBkZXBlbmRlbmNpZXMuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbigpfEFycmF5fSB0YXJnZXRcclxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbYXJnc11cclxuICAgICAqIEByZXR1cm4ge0RlZmVycmVkLjxUU2VydmljZT59XHJcbiAgICAgKi9cclxuICAgIHJlc29sdmU6IGZ1bmN0aW9uKCB0YXJnZXQsIGFyZ3MgKVxyXG4gICAge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcclxuICAgICAgICBhcmdzID0gdXRpbC5tYWtlQXJyYXkoIGFyZ3VtZW50cyApO1xyXG4gICAgICAgIGFyZ3Muc2hpZnQoIDAgKTtcclxuICAgICAgICB0aGlzLnJlc29sdmVUYXJnZXQoIHRhcmdldCApXHJcbiAgICAgICAgICAgIC50aGVuKCBmdW5jdGlvbiggcmVjaXBlIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZhY3RvcnkgPSBzZWxmLm1ha2VGYWN0b3J5KCByZWNpcGUgKTtcclxuICAgICAgICAgICAgICAgIGlmICggcmVjaXBlLnRoZW9yeS5pc1Byb3ZpZGVyIClcclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCBmYWN0b3J5ICk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSggZmFjdG9yeS5hcHBseSggdW5kZWZpbmVkLCBhcmdzICkgKTtcclxuXHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCByZWFzb24gKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoIHJlYXNvbiApO1xyXG4gICAgICAgICAgICB9LCBmYWxzZSApO1xyXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogQmluZHMgYW4gb2JqZWN0IGdyYXBoLlxyXG4gICAgICogRm9yIGV4YW1wbGU6XHJcbiAgICAgKiAgIDxwcmU+XHJcbiAgICAgKiAgICAgLmF1dG9CaW5kKHtcclxuICAgICAqICAgICAgIGZvbzoge1xyXG4gICAgICogICAgICAgICBiYXI6IDJcclxuICAgICAqICAgICAgIH1cclxuICAgICAqICAgICB9KTtcclxuICAgICAqICAgPC9wcmU+XHJcbiAgICAgKiBpcyBlcXVpdmFsZW50IHRvOlxyXG4gICAgICogICA8cHJlPlxyXG4gICAgICogICAgIC5iaW5kKCBcImZvby5iYXJcIiApLnRvKCAyICk7XHJcbiAgICAgKiAgIDwvcHJlPlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGdyYXBoXHJcbiAgICAgKiBAcmV0dXJuIHtJbmplY3Rvcn1cclxuICAgICAqL1xyXG4gICAgYXV0b0JpbmQ6IGZ1bmN0aW9uKCBncmFwaCApXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckdyYXBoKCBcIlwiLCBncmFwaCApO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wdWI7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEBkZXNjcmlwdGlvbiBCaW5kcyBhIHNlcnZpY2UgdG8gYSBwcm92aWRlciBhbmQgcmV0dXJucyB0aGUgYmluZGluZy5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZXJ2aWNlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fGZ1bmN0aW9uKCl9IHByb3ZpZGVyXHJcbiAgICAgKiBAcmV0dXJuIHtCaW5kaW5nfVxyXG4gICAgICovXHJcbiAgICBfX3JlZ2lzdGVyOiBmdW5jdGlvbiggc2VydmljZSwgcHJvdmlkZXIgKVxyXG4gICAge1xyXG4gICAgICAgIHZhciBiaW5kaW5nID0gbnVsbDtcclxuICAgICAgICBpZiAoIHV0aWwuaXNBcnJheSggcHJvdmlkZXIgKSApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwcm92aWRlciA9IHByb3ZpZGVyLnNsaWNlKCAwICk7XHJcbiAgICAgICAgICAgIGJpbmRpbmcgPSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiBwcm92aWRlci5wb3AoKSxcclxuICAgICAgICAgICAgICAgIGluamVjdDogcHJvdmlkZXJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmluZGluZyA9IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHByb3ZpZGVyLFxyXG4gICAgICAgICAgICAgICAgaW5qZWN0OiAoIHByb3ZpZGVyLiRpbmplY3QgfHwgW10gKS5zbGljZSggMCApXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggIXV0aWwuaXNGdW5jKCBiaW5kaW5nLnJlc29sdmUgKSApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBiaW5kaW5nLnJlc29sdmU7XHJcbiAgICAgICAgICAgIGJpbmRpbmcucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRhaW5lclsgc2VydmljZSBdID0gdGhpcy5jb250YWluZXJbIHNlcnZpY2UgXSB8fCBbXTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lclsgc2VydmljZSBdLnB1c2goIGJpbmRpbmcgKTtcclxuICAgICAgICByZXR1cm4gYmluZGluZztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBncmFwaFxyXG4gICAgICovXHJcbiAgICBfX3JlZ2lzdGVyR3JhcGg6IGZ1bmN0aW9uKCBwYXRoLCBncmFwaCApXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBwcmVmaXggPSBwYXRoID09PSBcIlwiID8gIFwiXCIgOiBwYXRoICsgXCIuXCI7XHJcbiAgICAgICAgdXRpbC5lYWNoKCBncmFwaCwgZnVuY3Rpb24oIHR5cGUsIG5hbWUgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKCB1dGlsLmlzUGxhaW5PYmplY3QoIHR5cGUgKSApXHJcbiAgICAgICAgICAgICAgICBzZWxmLnJlZ2lzdGVyR3JhcGgoIHByZWZpeCArIG5hbWUsIHR5cGUgKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgc2VsZi5yZWdpc3RlciggcHJlZml4ICsgbmFtZSwgdHlwZSApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7UmVjaXBlfSByZWNpcGVcclxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKCl9XHJcbiAgICAgKi9cclxuICAgIF9fbWFrZUZhY3Rvcnk6IGZ1bmN0aW9uKCByZWNpcGUgKVxyXG4gICAge1xyXG4gICAgICAgIGlmICggcmVjaXBlLnRoZW9yeS5pc0xhenkgKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlTGF6eUZhY3RvcnkoIHJlY2lwZSApO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0ge1JlY2lwZX0gcmVjaXBlXHJcbiAgICAgICAgICogQHJldHVybiB7Q29tcG9uZW50fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHRvQ29tcG9uZW50KCByZWNpcGUgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudDogbnVsbCxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgY2FjaGU6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVjaXBlOiByZWNpcGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICB2YXIgZ2VuZXJhdGlvbnMgPSBbXTtcclxuICAgICAgICB2YXIgcm9vdCA9IHRvQ29tcG9uZW50KCByZWNpcGUgKTtcclxuICAgICAgICB2YXIgY3VycmVudCA9IFsgcm9vdCBdO1xyXG4gICAgICAgIHZhciBuZXh0O1xyXG5cclxuICAgICAgICB3aGlsZSAoIGN1cnJlbnQubGVuZ3RoIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5leHQgPSBbXTtcclxuICAgICAgICAgICAgdXRpbC5lYWNoKCBjdXJyZW50LCBmdW5jdGlvbiggY29tcG9uZW50IClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKCBjb21wb25lbnQucmVjaXBlLnRoZW9yeS5pc0xhenkgKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICB1dGlsLmVhY2goIGNvbXBvbmVudC5yZWNpcGUuZGVwZW5kZW5jaWVzLCBmdW5jdGlvbiggcmVjaXBlLCBwb3NpdGlvbiApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlcGVuZGVuY3kgPSB0b0NvbXBvbmVudCggcmVjaXBlICk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jeS5wYXJlbnQgPSBjb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jeS5wb3NpdGlvbiA9IHBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQucHVzaCggZGVwZW5kZW5jeSApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBnZW5lcmF0aW9ucy5wdXNoKCBjdXJyZW50ICk7XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2VuZXJhdGlvbnMucmV2ZXJzZSgpO1xyXG4gICAgICAgIGdlbmVyYXRpb25zLnBvcCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdXRpbC5lYWNoKCBnZW5lcmF0aW9ucywgZnVuY3Rpb24oIGdlbmVyYXRpb24gKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmVhY2goIGdlbmVyYXRpb24sIGZ1bmN0aW9uKCBjb21wb25lbnQgKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5wYXJlbnQuY2FjaGVbIGNvbXBvbmVudC5wb3NpdGlvbiBdID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LnJlY2lwZS50aGVvcnkuaXNQcm92aWRlciA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWFrZUZhY3RvcnkoIGNvbXBvbmVudC5yZWNpcGUgKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5yZWNpcGUudGhlb3J5LnJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgY29tcG9uZW50LmNhY2hlICk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmNhY2hlID0gW107XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gcm9vdC5jYWNoZS5jb25jYXQoIHV0aWwubWFrZUFycmF5KCBhcmd1bWVudHMgKSApO1xyXG4gICAgICAgICAgICByb290LmNhY2hlID0gW107XHJcbiAgICAgICAgICAgIHJldHVybiByb290LnJlY2lwZS50aGVvcnkucmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBhcmdzICk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1JlY2lwZX0gcmVjaXBlXHJcbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbigpfVxyXG4gICAgICovXHJcbiAgICBfX21ha2VMYXp5RmFjdG9yeTogZnVuY3Rpb24oIHJlY2lwZSApXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHZhciBmYWN0b3J5ID0gbnVsbDtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgICAgICAgICBpZiAoICFmYWN0b3J5IClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5yZXNvbHZlVGFyZ2V0KCByZWNpcGUudGhlb3J5Lm5hbWUgKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCBmdW5jdGlvbiggcmVjaXBlIClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY3RvcnkgPSBzZWxmLm1ha2VGYWN0b3J5KCByZWNpcGUgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSggZmFjdG9yeS5hcHBseSggdW5kZWZpbmVkLCBhcmdzICkgKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiggcmVhc29uIClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCggcmVhc29uICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZmFsc2UgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCBmYWN0b3J5LmFwcGx5KCB1bmRlZmluZWQsIGFyZ3MgKSApO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBBdHRlbXB0cyB0byByZXNvbHZlIGEgdGFyZ2V0LlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8QXJyYXl8ZnVuY3Rpb24oKX0gdGFyZ2V0XHJcbiAgICAgKiBAcmV0dXJuIHtEZWZlcnJlZC48UmVjaXBlPn1cclxuICAgICAqL1xyXG4gICAgX19yZXNvbHZlVGFyZ2V0OiBmdW5jdGlvbiggdGFyZ2V0IClcclxuICAgIHtcclxuICAgICAgICBmdW5jdGlvbiBsb2FkKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG1vZHVsZXMgPSB1dGlsLm1hcCggcGxhbi5taXNzaW5nLCBmdW5jdGlvbiggc2VydmljZSApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmICggc2VydmljZSAhPT0gUFJPVklERVIgJiYgbmV3IFJlZ0V4cCggXCJeXCIgKyBQUk9WSURFUiApLnRlc3QoIHNlcnZpY2UgKSApXHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZSA9IHNlcnZpY2Uuc3Vic3RyKCBQUk9WSURFUi5sZW5ndGggKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCBzZXJ2aWNlICE9PSBMQVpZX1BST1ZJREVSICYmIG5ldyBSZWdFeHAoIFwiXlwiICsgTEFaWV9QUk9WSURFUiApLnRlc3QoIHNlcnZpY2UgKSApXHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZSA9IHNlcnZpY2Uuc3Vic3RyKCBMQVpZX1BST1ZJREVSLmxlbmd0aCApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UucmVwbGFjZSggL1xcLi9nLCBcIi9cIiApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZW52aXJvbm1lbnQud2luZG93LnJlcXVpcmUoIG1vZHVsZXMsIGRvbmUsIGZhaWwgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRvbmUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGJpbmRpbmdzID0ge307XHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG5cclxuICAgICAgICAgICAgdXRpbC5lYWNoKCBwbGFuLm1pc3NpbmcsIGZ1bmN0aW9uKCBzZXJ2aWNlLCBpbmRleCApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIHRoZSByZXR1cm5lZCBzZXJ2aWNlLiBJZiB0aGVyZSdzIG5vIHdheSB3ZSBjYW4gdHVybiBpdCBpbnRvIGEgYmluZGluZyxcclxuICAgICAgICAgICAgICAgIC8vIHdlJ2xsIGdldCBvdXJzZWx2ZXMgaW50byBhIG5ldmVyZW5kaW5nIGxvb3AgdHJ5aW5nIHRvIHJlc29sdmUgaXQuXHJcbiAgICAgICAgICAgICAgICB2YXIgc3ZjID0gYXJnc1sgaW5kZXggXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICFzdmMgfHwgISggLyhzdHJpbmd8ZnVuY3Rpb258YXJyYXkpLyApLnRlc3QoIHV0aWwudHlwZU9mKCBzdmMgKSApIClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUeXBlRXJyb3IoIFwiTW9kdWxlICdcIiArIG1vZHVsZXNbIGluZGV4IF0gKyBcIicgbG9hZGVkIHN1Y2Nlc3NmdWxseS4gRmFpbGVkIHRvIHJlc29sdmUgc2VydmljZSAnXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZSArIFwiJy4gRXhwZWN0ZWQgc2VydmljZSB0byBiZSBhIHN0cmluZywgYXJyYXksIG9yIGZ1bmN0aW9uLiBGb3VuZCAnXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCBzdmMgJiYgc3ZjLnRvU3RyaW5nID8gc3ZjLnRvU3RyaW5nKCkgOiB1dGlsLnR5cGVPZiggc3ZjICkgKSArIFwiJyBpbnN0ZWFkLlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICggdXRpbC5pc0FycmF5KCBzdmMgKSAmJiAhdXRpbC5pc0Z1bmMoIHN2Y1sgc3ZjLmxlbmd0aCAtIDEgXSApIClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdmMgPSBzdmNbIHN2Yy5sZW5ndGggLSAxIF07XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgVHlwZUVycm9yKCBcIk1vZHVsZSAnXCIgKyBtb2R1bGVzWyBpbmRleCBdICsgXCInIGxvYWRlZCBzdWNjZXNzZnVsbHkuIEZhaWxlZCB0byByZXNvbHZlIHNlcnZpY2UgJ1wiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UgKyBcIicuIEZvdW5kIGFycmF5LiBFeHBlY3RlZCBsYXN0IGVsZW1lbnQgdG8gYmUgYSBmdW5jdGlvbi4gRm91bmQgJ1wiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICggc3ZjICYmIHN2Yy50b1N0cmluZyA/IHN2Yy50b1N0cmluZygpIDogdXRpbC50eXBlT2YoIHN2YyApICkgKyBcIicgaW5zdGVhZC5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYmluZGluZ3NbIHNlcnZpY2UgXSA9IGFyZ3NbIGluZGV4IF07XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBkZWZlcnJlZC5zdGF0ZSA9PT0gXCJyZWplY3RlZFwiIClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHBsYW4udXBkYXRlKCBiaW5kaW5ncyApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBwbGFuLm1pc3NpbmcubGVuZ3RoIClcclxuICAgICAgICAgICAgICAgIGxvYWQoKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSggcGxhbi5yZWNpcGUgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZhaWwoIHJlYXNvbiApIHtcclxuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCByZWFzb24gKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xyXG4gICAgICAgIHZhciBtb2R1bGVzO1xyXG4gICAgICAgIHZhciBwbGFuID0gdGhpcy5nZXRFeGVjdXRpb25QbGFuKCB0YXJnZXQgKTtcclxuXHJcbiAgICAgICAgaWYgKCBwbGFuLm1pc3NpbmcubGVuZ3RoIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICggZW52aXJvbm1lbnQud2luZG93LnJlcXVpcmUgKVxyXG4gICAgICAgICAgICAgICAgbG9hZCgpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCggbmV3IGVycm9ycy5JbnZhbGlkT3BlcmF0aW9uRXJyb3IoIFwiU2VydmljZShzKSBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5tYXAoIHBsYW4ubWlzc2luZywgZnVuY3Rpb24oIHggKSB7IHJldHVybiBcIidcIiArIHggKyBcIidcIjsgfSkuam9pbiggXCIsIFwiICkgKyBcIiBoYXZlIG5vdCBiZWVuIHJlZ2lzdGVyZWQuXCIgKSApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSggcGxhbi5yZWNpcGUgKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDcmVhdGVzIGFuIGV4ZWN1dGlvbiBwbGFuIGZvciByZXNvbHZpbmcgYSB0YXJnZXQuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xBcnJheXxmdW5jdGlvbigpfSB0YXJnZXRcclxuICAgICAqIEByZXR1cm4ge1BsYW59XHJcbiAgICAgKi9cclxuICAgIF9fZ2V0RXhlY3V0aW9uUGxhbjogZnVuY3Rpb24oIHRhcmdldCApXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VcclxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCBSZWNpcGUgKX0gY2FsbGJhY2tcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiB3YXRjaEZvciggc2VydmljZSwgY2FsbGJhY2sgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGlzTGF6eSA9IHNlcnZpY2UgIT09IExBWllfUFJPVklERVIgJiYgbmV3IFJlZ0V4cCggXCJeXCIgKyBMQVpZX1BST1ZJREVSICkudGVzdCggc2VydmljZSApO1xyXG4gICAgICAgICAgICB2YXIgaXNQcm92aWRlciA9IGlzTGF6eSB8fCBzZXJ2aWNlICE9PSBQUk9WSURFUiAmJiBuZXcgUmVnRXhwKCBcIl5cIiArIFBST1ZJREVSICkudGVzdCggc2VydmljZSApO1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBiaW5kaW5ncyApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdmMgPSBiaW5kaW5nc1sgc2VydmljZSBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCBzdmMgKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGVvcnkgPSBzZWxmLnRoZW9yaXplKCBzdmMgKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIHRoZW9yeSApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGVvcnkuaXNQcm92aWRlciA9IGlzUHJvdmlkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZW9yeS5pc0xhenkgPSBpc0xhenk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCByZXNvbHZlKCB0aGVvcnkgKSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nLnB1c2goIHN2YyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXRjaEZvciggc3ZjLCBjYWxsYmFjayApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB3YXRjaGVzLnNwbGljZSggdXRpbC5pbmRleE9mKCB3YXRjaGVzLCBoYW5kbGVyICksIDEgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgd2F0Y2hlcy5wdXNoKCBoYW5kbGVyICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0ge1RoZW9yeX0gdGhlb3J5XHJcbiAgICAgICAgICogQHJldHVybiB7UmVjaXBlfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHRvUmVjaXBlKCB0aGVvcnkgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRoZW9yeTogdGhlb3J5LFxyXG4gICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzOiBbXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogVHVybnMgYSB0aGVvcnkgaW50byBzb21ldGhpbmcgdGhhdCBjYW4gYmUgcmVzb2x2ZWQuIEEgdGhlb3J5IGNhbm5vdCBiZSByZXNvbHZlZCB1bmxlc3NcclxuICAgICAgICAgKiBhbGwgb2YgaXRzIGRlcGVuZGVuY2llcyBjYW4gYWxzbyBiZSByZXNvbHZlZC5cclxuICAgICAgICAgKiBAcGFyYW0ge1RoZW9yeX0gdGhlb3J5XHJcbiAgICAgICAgICogQHJldHVybiB7UmVjaXBlfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmUoIHRoZW9yeSApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgcmVjaXBlID0gdG9SZWNpcGUoIHRoZW9yeSApO1xyXG5cclxuICAgICAgICAgICAgLy8gT3B0aW1pemF0aW9uOiBzaG9ydC1jaXJjdWl0cyBhbiBleHRyYSBmdW5jdGlvbiBjYWxsLlxyXG4gICAgICAgICAgICBpZiAoIHJlY2lwZS50aGVvcnkuaXNMYXp5IClcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWNpcGU7XHJcblxyXG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IFsgcmVjaXBlIF0sIG5leHQ7XHJcbiAgICAgICAgICAgIHdoaWxlICggY3VycmVudC5sZW5ndGggKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBuZXh0ID0gW107XHJcbiAgICAgICAgICAgICAgICB1dGlsLmVhY2goIGN1cnJlbnQsIGZ1bmN0aW9uKCByZWNpcGUgKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICggcmVjaXBlLnRoZW9yeS5pc0xhenkgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuZWFjaCggcmVjaXBlLnRoZW9yeS5pbmplY3QsIGZ1bmN0aW9uKCBzZXJ2aWNlLCBwb3NpdGlvbiApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVwZW5kZW5jeSA9IHNlbGYuZXZhbHVhdGUoIHNlcnZpY2UsIHJlY2lwZS50aGVvcnkubmFtZSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRlcGVuZGVuY3kgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5ID0gdG9SZWNpcGUoIGRlcGVuZGVuY3kgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2lwZS5kZXBlbmRlbmNpZXNbIHBvc2l0aW9uIF0gPSBkZXBlbmRlbmN5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC5wdXNoKCBkZXBlbmRlbmN5ICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nLnB1c2goIHNlcnZpY2UgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoRm9yKCBzZXJ2aWNlLCBmdW5jdGlvbiggZGVwZW5kZW5jeSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNpcGUuZGVwZW5kZW5jaWVzWyBwb3NpdGlvbiBdID0gZGVwZW5kZW5jeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBuZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZWNpcGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG1pc3NpbmcgPSBbXTtcclxuICAgICAgICB2YXIgd2F0Y2hlcyA9IFtdO1xyXG4gICAgICAgIHZhciB0aGVvcnkgPSB0aGlzLmV2YWx1YXRlKCB0YXJnZXQgKTtcclxuICAgICAgICB2YXIgcmVjaXBlID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKCB0aGVvcnkgKVxyXG4gICAgICAgICAgICByZWNpcGUgPSByZXNvbHZlKCB0aGVvcnkgKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBUaGUgb25seSB0aW1lIC5ldmFsdWF0ZSgpIHdvdWxkIHJldHVybiBudWxsIGlzIGlmIHRoZSB0YXJnZXQgd2FzIGEgbmFtZSAoc3RyaW5nKVxyXG4gICAgICAgICAgICAvLyBwb2ludGluZyB0byBhIHNlcnZpY2UgdGhhdCBoYXNuJ3QgYmVlbiBib3VuZCB5ZXQuXHJcbiAgICAgICAgICAgIG1pc3NpbmcucHVzaCggdGFyZ2V0ICk7XHJcbiAgICAgICAgICAgIHdhdGNoRm9yKCB0YXJnZXQsIGZ1bmN0aW9uKCByZWNpcGUgKSB7XHJcbiAgICAgICAgICAgICAgICBwbGFuLnJlY2lwZSA9IHJlY2lwZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcGxhbiA9XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZWNpcGU6IHJlY2lwZSxcclxuICAgICAgICAgICAgbWlzc2luZzogbWlzc2luZyxcclxuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiggYmluZGluZ3MgKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBtaXNzaW5nLnNwbGljZSggMCApO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5lYWNoKCB3YXRjaGVzLnNsaWNlKCAwICksIGZ1bmN0aW9uKCBoYW5kbGVyICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIoIGJpbmRpbmdzICk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHBsYW47XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyBhbiBhbm9ueW1vdXMgdGFyZ2V0IHRvIGEgdGhlb3J5LlxyXG4gICAgICogQHBhcmFtIHtBcnJheXxmdW5jdGlvbigpfSB0YXJnZXRcclxuICAgICAqIEByZXR1cm4ge1RoZW9yeX1cclxuICAgICAqL1xyXG4gICAgX190aGVvcml6ZTogZnVuY3Rpb24oIHRhcmdldCApXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKCAhdGFyZ2V0IClcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgaWYgKCB1dGlsLmlzRnVuYyggdGFyZ2V0ICkgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZTogdGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgaW5qZWN0OiAoIHRhcmdldC4kaW5qZWN0IHx8IFtdICkuc2xpY2UoIDAgKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICggdXRpbC5pc0FycmF5KCB0YXJnZXQgKSApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQuc2xpY2UoIDAgKTtcclxuICAgICAgICAgICAgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZTogdGFyZ2V0LnBvcCgpLFxyXG4gICAgICAgICAgICAgICAgaW5qZWN0OiB0YXJnZXRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQGRlc2NyaXB0aW9uIEFuYWx5emVzIGEgdGFyZ2V0IChuYW1lZCBvciBhbm9ueW1vdXMpIGFuZCByZXR1cm5zIGEgdGhlb3J5IG9uIGhvdyB0byByZXNvbHZlIGl0LlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8QXJyYXl8ZnVuY3Rpb24oKX0gdGFyZ2V0XHJcbiAgICAgKiBAcmV0dXJuIHtUaGVvcnl9XHJcbiAgICAgKi9cclxuICAgIF9fZXZhbHVhdGU6IGZ1bmN0aW9uKCB0YXJnZXQsIGRlc3RpbmF0aW9uIClcclxuICAgIHtcclxuICAgICAgICBmdW5jdGlvbiBmaW5kKCBzZXJ2aWNlIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBiaW5kaW5ncyA9IHNlbGYuY29udGFpbmVyWyBzZXJ2aWNlIF0gfHwgW107XHJcbiAgICAgICAgICAgIHZhciBpID0gYmluZGluZ3MubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgZm9yICggOyBpID49IDA7IGktLSApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmICggIWRlc3RpbmF0aW9uIClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoICFiaW5kaW5nc1sgaSBdLmZpbHRlciApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoICFiaW5kaW5nc1sgaSBdLmZpbHRlciB8fCB1dGlsLmluZGV4T2YoIGJpbmRpbmdzWyBpIF0uZmlsdGVyLCBkZXN0aW5hdGlvbiApID4gLTEgKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBiaW5kaW5nc1sgaSBdIHx8IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMudGhlb3JpemUoIHRhcmdldCApO1xyXG4gICAgICAgIGlmICggIXJlc3VsdCAmJiB1dGlsLmlzU3RyaW5nKCB0YXJnZXQgKSApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgYmluZGluZyA9IGZpbmQoIHRhcmdldCApO1xyXG4gICAgICAgICAgICBpZiAoIGJpbmRpbmcgKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZTogYmluZGluZy5yZXNvbHZlLFxyXG4gICAgICAgICAgICAgICAgICAgIGluamVjdDogYmluZGluZy5pbmplY3Quc2xpY2UoIDAgKSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0YXJnZXRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCAhcmVzdWx0ICYmIHRhcmdldCAhPT0gUFJPVklERVIgJiYgbmV3IFJlZ0V4cCggXCJeXCIgKyBQUk9WSURFUiApLnRlc3QoIHRhcmdldCApIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYmluZGluZyA9IGZpbmQoIHRhcmdldC5zdWJzdHIoIFBST1ZJREVSLmxlbmd0aCApICk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIGJpbmRpbmcgKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZTogYmluZGluZy5yZXNvbHZlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmplY3Q6IGJpbmRpbmcuaW5qZWN0LnNsaWNlKCAwICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRhcmdldC5zdWJzdHIoIFBST1ZJREVSLmxlbmd0aCApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1Byb3ZpZGVyOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoICFyZXN1bHQgJiYgdGFyZ2V0ICE9PSBMQVpZX1BST1ZJREVSICYmIG5ldyBSZWdFeHAoIFwiXlwiICsgTEFaWV9QUk9WSURFUiApLnRlc3QoIHRhcmdldCApIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYmluZGluZyA9IGZpbmQoIHRhcmdldC5zdWJzdHIoIExBWllfUFJPVklERVIubGVuZ3RoICkgKSB8fCB7fTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiBiaW5kaW5nLnJlc29sdmUgfHwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBpbmplY3Q6IGJpbmRpbmcuaW5qZWN0IHx8IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdGFyZ2V0LnN1YnN0ciggTEFaWV9QUk9WSURFUi5sZW5ndGggKSxcclxuICAgICAgICAgICAgICAgICAgICBpc1Byb3ZpZGVyOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzTGF6eTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGlmICggcmVzdWx0LmluamVjdCApXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmluamVjdCA9IHJlc3VsdC5pbmplY3Quc2xpY2UoIDAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzLnByb3ZpZGVyT2YgPSBmdW5jdGlvbiggc2VydmljZSApIHtcclxuICAgIHJldHVybiBQUk9WSURFUiArIHNlcnZpY2U7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cy5sYXp5UHJvdmlkZXJPZiA9IGZ1bmN0aW9uKCBzZXJ2aWNlICkge1xyXG4gICAgcmV0dXJuIExBWllfUFJPVklERVIgKyBzZXJ2aWNlO1xyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIENUT1I6IFwiY3RvclwiXHJcbn07XHJcbiIsIi8vIFdoZW4gd2Ugd2FudCB0byBwcnkgYW4gb2JqZWN0IG9wZW4sIHdlIHNldCB0aGlzIHRvIHRoZSB0eXBlIG9mIHRoZSBvYmplY3RcclxuLy8gYW5kIGNhbGwgJHNjb3BlIHRvIGV4dHJhY3QgdGhlIHByaXZhdGUgc2NvcGUuXHJcbnZhciB2YWx1ZSA9IG51bGw7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIG9wZW46IGZ1bmN0aW9uKCB0eXBlICkge1xyXG4gICAgICAgIHZhbHVlID0gdHlwZTtcclxuICAgIH0sXHJcbiAgICBjbG9zZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFsdWUgPSBudWxsO1xyXG4gICAgfSxcclxuICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbn07XHJcbiIsInZhciBkZWZlcnJlZCA9IHJlcXVpcmUoIFwiLi9kZWZlcnJlZFwiICk7XHJcbnZhciBkZWZpbmUgPSByZXF1aXJlKCBcIi4vZGVmaW5lXCIgKTtcclxudmFyIGVudmlyb25tZW50ID0gcmVxdWlyZSggXCIuL2Vudmlyb25tZW50XCIgKTtcclxudmFyIGVycm9ycyA9IHJlcXVpcmUoIFwiLi9lcnJvcnNcIiApO1xyXG52YXIgaW5qZWN0b3IgPSByZXF1aXJlKCBcIi4vaW5qZWN0b3JcIiApO1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoIFwiLi91dGlsXCIgKTtcclxuXHJcbnZhciB0eXBlID0gZGVmaW5lO1xyXG50eXBlLm9mID0gdXRpbC50eXBlT2Y7XHJcblxyXG50eXBlLkRlZmluaXRpb25FcnJvciA9IGVycm9ycy5EZWZpbml0aW9uRXJyb3I7XHJcbnR5cGUuSW5pdGlhbGl6YXRpb25FcnJvciA9IGVycm9ycy5Jbml0aWFsaXphdGlvbkVycm9yO1xyXG50eXBlLkFjY2Vzc1Zpb2xhdGlvbkVycm9yID0gZXJyb3JzLkFjY2Vzc1Zpb2xhdGlvbkVycm9yO1xyXG50eXBlLkludmFsaWRPcGVyYXRpb25FcnJvciA9IGVycm9ycy5JbnZhbGlkT3BlcmF0aW9uRXJyb3I7XHJcbnR5cGUuQXJndW1lbnRFcnJvciA9IGVycm9ycy5Bcmd1bWVudEVycm9yO1xyXG5cclxudHlwZS5pbmplY3RvciA9IGluamVjdG9yO1xyXG50eXBlLnByb3ZpZGVyT2YgPSBpbmplY3Rvci5wcm92aWRlck9mO1xyXG50eXBlLmxhenlQcm92aWRlck9mID0gaW5qZWN0b3IubGF6eVByb3ZpZGVyT2Y7XHJcblxyXG50eXBlLmRlZmVyID0gZGVmZXJyZWQ7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGVudmlyb25tZW50LndpbmRvdy50eXBlID0gdHlwZTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPVxyXG57XHJcbiAgICBtYWtlQXJyYXk6IG1ha2VBcnJheSxcclxuICAgIGVhY2g6IGVhY2gsXHJcbiAgICB0eXBlT2Y6IHR5cGVPZixcclxuICAgIGlzRnVuYzogaXNGdW5jLFxyXG4gICAgaXNTdHJpbmc6IGlzU3RyaW5nLFxyXG4gICAgaXNBcnJheTogaXNBcnJheSxcclxuICAgIHRyaW06IHRyaW0sXHJcbiAgICBrZXlzOiBrZXlzLFxyXG4gICAgaGFzT3duOiBoYXNPd24sXHJcbiAgICBpbmRleE9mOiBpbmRleE9mLFxyXG4gICAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcclxuICAgIG1hcDogbWFwXHJcbn07XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBvYmplY3QgY2FuIGJlIGl0ZXJhdGVkIG92ZXIgbGlrZSBhbiBhcnJheS5cclxuICogaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvYmxvYi9hNTAzN2NiOWUzODUxYjE3MWI0OWY2ZDcxN2ZiNDBlNTlhYTM0NGMyL3NyYy9jb3JlLmpzI0w1MDFcclxuICogQHBhcmFtIHsqfSBvYmpcclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKVxyXG57XHJcbiAgICB2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aCxcclxuICAgICAgICB0eXBlID0gdHlwZU9mKCBvYmogKTtcclxuXHJcbiAgICBpZiAoIHR5cGVPZiggb2JqICkgPT09IFwid2luZG93XCIgKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICBpZiAoIG9iai5ub2RlVHlwZSA9PT0gMSAmJiBsZW5ndGggKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgdHlwZSA9PT0gXCJhcnJheVwiIHx8XHJcbiAgICAgICAgdHlwZSAhPT0gXCJmdW5jdGlvblwiICYmIChcclxuICAgICAgICAgICAgbGVuZ3RoID09PSAwIHx8XHJcbiAgICAgICAgICAgIHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmpcclxuICAgICAgICApXHJcbiAgICApO1xyXG59XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uIFR1cm5zIGFuIG9iamVjdCBpbnRvIGEgdHJ1ZSBhcnJheS5cclxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9ialxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICovXHJcbmZ1bmN0aW9uIG1ha2VBcnJheSggb2JqIClcclxue1xyXG4gICAgaWYgKCBpc0FycmF5KCBvYmogKSApXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgIGVhY2goIG9iaiwgZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goIGl0ZW0gKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBJdGVyYXRlcyBvZiBhbiBhcnJheSBvciBvYmplY3QsIHBhc3NpbmcgaW4gdGhlIGl0ZW0gYW5kIGluZGV4IC8ga2V5LlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9ibG9iL2E1MDM3Y2I5ZTM4NTFiMTcxYjQ5ZjZkNzE3ZmI0MGU1OWFhMzQ0YzIvc3JjL2NvcmUuanMjTDMxNlxyXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2tcclxuICovXHJcbmZ1bmN0aW9uIGVhY2goIG9iaiwgY2FsbGJhY2sgKVxyXG57XHJcbiAgICB2YXIgaSA9IDAsIHZhbHVlO1xyXG4gICAgaWYgKCBpc0FycmF5TGlrZSggb2JqICkgKVxyXG4gICAge1xyXG4gICAgICAgIGZvciAoIDsgaSA8IG9iai5sZW5ndGg7IGkrKyApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoIGNhbGxiYWNrLmNhbGwoIHVuZGVmaW5lZCwgb2JqWyBpIF0sIGkgKSA9PT0gZmFsc2UgKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICAgIGZvciAoIGkgaW4gb2JqIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICggaGFzT3duKCBvYmosIGkgKSAmJiBjYWxsYmFjay5jYWxsKCB1bmRlZmluZWQsIG9ialsgaSBdLCBpICkgPT09IGZhbHNlIClcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBHZXRzIHRoZSBpbnRlcm5hbCBKYXZhU2NyaXB0IFtbQ2xhc3NdXSBvZiBhbiBvYmplY3QuXHJcbiAqIGh0dHA6Ly9wZXJmZWN0aW9ua2lsbHMuY29tL2luc3RhbmNlb2YtY29uc2lkZXJlZC1oYXJtZnVsLW9yLWhvdy10by13cml0ZS1hLXJvYnVzdC1pc2FycmF5L1xyXG4gKiBAcGFyYW0geyp9IG9iamVjdFxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5mdW5jdGlvbiB0eXBlT2YoIG9iamVjdCApXHJcbntcclxuICAgIC8vIEluIElFOCwgT2JqZWN0LnRvU3RyaW5nIG9uIG51bGwgYW5kIHVuZGVmaW5lZCByZXR1cm5zIFwib2JqZWN0XCIuXHJcbiAgICBpZiAoIG9iamVjdCA9PT0gbnVsbCApXHJcbiAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xyXG4gICAgaWYgKCBvYmplY3QgPT09IHVuZGVmaW5lZCApXHJcbiAgICAgICAgcmV0dXJuIFwidW5kZWZpbmVkXCI7XHJcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCBvYmplY3QgKVxyXG4gICAgICAgIC5tYXRjaCggL15cXFtvYmplY3RcXHMoLiopXFxdJC8gKVsxXS50b0xvd2VyQ2FzZSgpO1xyXG59XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uIERldGVybWluZXMgd2hldGhlciBhbiBvYmplY3QgaXMgYSBmdW5jdGlvbi5cclxuICogQHBhcmFtIHsqfSBvYmplY3RcclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbmZ1bmN0aW9uIGlzRnVuYyggb2JqZWN0ICkge1xyXG4gICAgcmV0dXJuIHR5cGVPZiggb2JqZWN0ICkgPT09IFwiZnVuY3Rpb25cIjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBEZXRlcm1pbmVzIHdoZXRoZXIgYW4gb2JqZWN0IGlzIGFuIGFycmF5LlxyXG4gKiBAcGFyYW0geyp9IG9iamVjdFxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNBcnJheSggb2JqZWN0ICkge1xyXG4gICAgcmV0dXJuIHR5cGVPZiggb2JqZWN0ICkgPT09IFwiYXJyYXlcIjtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNTdHJpbmcoIG9iamVjdCApIHtcclxuICAgIHJldHVybiB0eXBlT2YoIG9iamVjdCApID09PSBcInN0cmluZ1wiO1xyXG59XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBmcm9tIGEgc3RyaW5nLlxyXG4gKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMzA4MTU3Lzc0MDk5NlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxuZnVuY3Rpb24gdHJpbSggdmFsdWUgKSB7XHJcbiAgICByZXR1cm4gdmFsdWUudHJpbSA/IHZhbHVlLnRyaW0oKSA6IHZhbHVlLnJlcGxhY2UoIC9eXFxzK3xcXHMrJC9nLCBcIlwiICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAZGVzY3JpcHRpb24gR2V0cyB0aGUga2V5cyBvZiBhbiBvYmplY3QuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqL1xyXG5mdW5jdGlvbiBrZXlzKCBvYmplY3QgKVxyXG57XHJcbiAgICBpZiAoIE9iamVjdC5rZXlzIClcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoIG9iamVjdCApO1xyXG4gICAgdmFyIHJldCA9IFtdO1xyXG4gICAgZm9yICggdmFyIGtleSBpbiBvYmplY3QgKVxyXG4gICAge1xyXG4gICAgICAgIGlmICggaGFzT3duKCBvYmplY3QsIGtleSApIClcclxuICAgICAgICAgICAgcmV0LnB1c2goIGtleSApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBwcm9wZXJ0eSBleGlzdHMgb24gdGhlIG9iamVjdCBpdHNlbGYgKGFzIG9wcG9zZWQgdG8gYmVpbmcgaW4gdGhlIHByb3RvdHlwZS4pXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BcclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbmZ1bmN0aW9uIGhhc093biggb2JqLCBwcm9wICkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCggb2JqLCBwcm9wICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogU2VhcmNoZXMgYW4gYXJyYXkgZm9yIHRoZSBzcGVjaWZpZWQgaXRlbSBhbmQgcmV0dXJucyBpdHMgaW5kZXguIFJldHVybnMgLTEgaWYgdGhlIGl0ZW0gaXMgbm90IGZvdW5kLlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheVxyXG4gKiBAcGFyYW0geyp9IGl0ZW1cclxuICogQHJldHVybiB7bnVtYmVyfVxyXG4gKi9cclxuZnVuY3Rpb24gaW5kZXhPZiggYXJyYXksIGl0ZW0gKVxyXG57XHJcbiAgICBpZiAoIGFycmF5LmluZGV4T2YgKVxyXG4gICAgICAgIHJldHVybiBhcnJheS5pbmRleE9mKCBpdGVtICk7XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XHJcbiAgICAgICAgZWFjaCggYXJyYXksIGZ1bmN0aW9uKCBvYmosIGkgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKCBvYmogPT09IGl0ZW0gKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAZGVzY3JpcHRpb24gRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIG9iamVjdCB3YXMgY3JlYXRlZCB1c2luZyBcInt9XCIgb3IgXCJuZXcgT2JqZWN0XCIuXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L2Jsb2IvYTUwMzdjYjllMzg1MWIxNzFiNDlmNmQ3MTdmYjQwZTU5YWEzNDRjMi9zcmMvY29yZS5qcyNMMjM3XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoIG9iaiApXHJcbntcclxuICAgIC8vIE5vdCBwbGFpbiBvYmplY3RzOlxyXG4gICAgLy8gLSBBbnkgb2JqZWN0IG9yIHZhbHVlIHdob3NlIGludGVybmFsIFtbQ2xhc3NdXSBwcm9wZXJ0eSBpcyBub3QgXCJbb2JqZWN0IE9iamVjdF1cIlxyXG4gICAgLy8gLSBET00gbm9kZXNcclxuICAgIC8vIC0gd2luZG93XHJcbiAgICBpZiAoIHR5cGVPZiggb2JqICkgIT09IFwib2JqZWN0XCIgfHwgb2JqLm5vZGVUeXBlIHx8IHR5cGVPZiggb2JqICkgPT09IFwid2luZG93XCIgKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAvLyBTdXBwb3J0OiBGaXJlZm94IDwyMFxyXG4gICAgLy8gVGhlIHRyeS9jYXRjaCBzdXBwcmVzc2VzIGV4Y2VwdGlvbnMgdGhyb3duIHdoZW4gYXR0ZW1wdGluZyB0byBhY2Nlc3NcclxuICAgIC8vIHRoZSBcImNvbnN0cnVjdG9yXCIgcHJvcGVydHkgb2YgY2VydGFpbiBob3N0IG9iamVjdHMsIGllLiB8d2luZG93LmxvY2F0aW9ufFxyXG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODE0NjIyXHJcbiAgICB0cnlcclxuICAgIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIG9iai5jb25zdHJ1Y3RvciAmJlxyXG4gICAgICAgICAgICAhaGFzT3duKCBvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCBcImlzUHJvdG90eXBlT2ZcIiApXHJcbiAgICAgICAgKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHRoZSBmdW5jdGlvbiBoYXNuJ3QgcmV0dXJuZWQgYWxyZWFkeSwgd2UncmUgY29uZmlkZW50IHRoYXRcclxuICAgIC8vIHxvYmp8IGlzIGEgcGxhaW4gb2JqZWN0LCBjcmVhdGVkIGJ5IHt9IG9yIGNvbnN0cnVjdGVkIHdpdGggbmV3IE9iamVjdFxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1hcCggaXRlbXMsIGNhbGxiYWNrLCBjb250ZXh0IClcclxue1xyXG4gICAgaXRlbXMgPSBtYWtlQXJyYXkoIGl0ZW1zICk7XHJcbiAgICBpZiAoIEFycmF5LnByb3RvdHlwZS5tYXAgKVxyXG4gICAgICAgIHJldHVybiBpdGVtcy5tYXAoIGNhbGxiYWNrLCBjb250ZXh0ICk7XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGVhY2goIGl0ZW1zLCBmdW5jdGlvbiggaXRlbSwgaW5kZXggKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCBjYWxsYmFjay5jYWxsKCBjb250ZXh0LCBpdGVtLCBpbmRleCApICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19